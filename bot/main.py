import time
import traceback
import socket
import asyncio
import sys
import os
import logging
from aiohttp import web
from setup import bot, dp
from handlers.start import start_router
from handlers.generate import generate_router
from handlers.check import check_router
from handlers.common import common_router
from handlers.help import help_router
from database.database import init_db
from utils.logger import setup_logging  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ


setup_logging()  # –ó–∞–ø—É—Å–∫ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è

# ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ (–Ω—É–∂–Ω–æ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞)
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

# === 1Ô∏è‚É£ –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã ===
IS_LOCAL = os.getenv("LOCAL_RUN", "false").lower() == "true"  # LOCAL_RUN=true ‚Üí Polling

# === 2Ô∏è‚É£ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Webhook ===
WEBHOOK_HOST = os.getenv("WEBHOOK_URL", "https://namehuntbot-panarini.amvera.io").strip() # –î–æ–º–µ–Ω Amvera
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}".replace("http://", "https://")  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ HTTPS, –ø–æ–ª–Ω—ã–π URL –≤–µ–±—Ö—É–∫–∞

# === 3Ô∏è‚É£ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Web-—Å–µ—Ä–≤–µ—Ä–∞ ===
WEBAPP_HOST = "0.0.0.0"  # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –Ω–∞ –≤—Å–µ—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞—Ö
WEBAPP_PORT = int(os.getenv("WEBHOOK_PORT", 80))  # –ë–µ—Ä—ë–º –ø–æ—Ä—Ç –∏–∑ WEBHOOK_PORT


# === 4Ô∏è‚É£ –§—É–Ω–∫—Ü–∏–∏ —Å—Ç–∞—Ä—Ç–∞ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ ===
async def on_startup():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    print(f"üîó –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫: {WEBHOOK_URL}")
    await init_db()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

    # ‚úÖ –ü–æ–¥–∫–ª—é—á–∞–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    dp.include_router(start_router)
    dp.include_router(help_router)
    dp.include_router(check_router)
    dp.include_router(generate_router)
    dp.include_router(common_router)

    if IS_LOCAL: # –µ—Å–ª–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
        await bot.delete_webhook()  # ‚ùó –û—Ç–∫–ª—é—á–∞–µ–º Webhook –ø–µ—Ä–µ–¥ Polling
        logging.info("üõë Webhook –æ—Ç–∫–ª—é—á—ë–Ω! –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ Polling.")
    else: # –µ—Å–ª–∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å –æ–±–ª–∞–∫–∞
        try:
            await bot.delete_webhook()  # ‚ùó –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π Webhook –ø–µ—Ä–µ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π –Ω–æ–≤–æ–≥–æ
            logging.info(f"üîç Webhook Host: {WEBHOOK_HOST}")
            logging.info(f"üîç Webhook Path: {WEBHOOK_PATH}")
            print(f"üîç –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Webhook –ø–æ –∞–¥—Ä–µ—Å—É: {WEBHOOK_URL}")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
            logging.info(f"üìå Webhook URL –ø–µ—Ä–µ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π: {WEBHOOK_URL}")
            if not WEBHOOK_URL.startswith("https://"):
                logging.error("‚ùå –û—à–∏–±–∫–∞: Webhook URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å HTTPS!")

            await bot.set_webhook(WEBHOOK_URL)  # üîó –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Webhook
            logging.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ Webhook: {e}")

async def on_shutdown(_):
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
    logging.info("üö® –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –ó–∞–∫—Ä—ã–≤–∞—é —Å–µ—Å—Å–∏—é...")
    try:
        await bot.session.close()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º HTTP-—Å–µ—Å—Å–∏—é
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–µ—Å—Å–∏–∏: {e}")
    logging.info("‚úÖ –°–µ—Å—Å–∏—è –∑–∞–∫—Ä—ã—Ç–∞.")


async def handle_update(request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ Webhook (–ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã –æ—Ç Telegram)"""
    logging.info(f"üì© –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –æ—Ç Telegram: {await request.text()}")  # –õ–æ–≥–∏—Ä—É–µ–º –≤–µ—Å—å –∑–∞–ø—Ä–æ—Å
    update = await request.json()  # –ü–æ–ª—É—á–∞–µ–º JSON
    await dp.feed_update(bot=bot, update=update)  # –ü–µ—Ä–µ–¥–∞—ë–º –≤ aiogram
    return web.Response()  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º OK


async def handle_root(request):
    logging.info("‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω GET-–∑–∞–ø—Ä–æ—Å –Ω–∞ /")
    print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω GET-–∑–∞–ø—Ä–æ—Å –Ω–∞ /")  # –ß—Ç–æ–±—ã —Ç–æ—á–Ω–æ —É–≤–∏–¥–µ—Ç—å –≤ –ª–æ–≥–∞—Ö
    return web.Response(text="‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!", content_type="text/plain")

async def log_all_requests(app, handler):
    async def middleware_handler(request):
        logging.info(f"üì• –í—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å: {request.method} {request.path}")
        print(f"üì• –í—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å: {request.method} {request.path}")
        return await handler(request)
    return middleware_handler

app = web.Application(middlewares=[log_all_requests])



# === 5Ô∏è‚É£ –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –±–æ—Ç–∞ ===
async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    await on_startup()  # –í—ã–ø–æ–ª–Ω—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏

    if IS_LOCAL:
        # üîÑ Polling (–ª–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º)
        await dp.start_polling(bot)
    else:
        # üåê Webhook (—Å–µ—Ä–≤–µ—Ä–Ω—ã–π —Ä–µ–∂–∏–º)
        app = web.Application()
        app.add_routes([
            web.get("/", handle_root),
            web.head("/", handle_root),  # –î–æ–±–∞–≤–ª—è–µ–º HEAD-–∑–∞–ø—Ä–æ—Å—ã
        ])
        app.router.add_post("/webhook", handle_update)  # ‚úÖ –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—É—Ç—å
        app.on_shutdown.append(on_shutdown)  # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        logging.info("‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏:")
        for route in app.router.routes():
            try:
                logging.info(f"‚û°Ô∏è {route.method} {route.path}")
            except AttributeError:
                logging.info(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω –º–∞—Ä—à—Ä—É—Ç: {route}")
        return app

import socket

def check_port(port):
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        return s.connect_ex(("0.0.0.0", port)) == 0

port_status = "–û—Ç–∫—Ä—ã—Ç" if check_port(WEBAPP_PORT) else "‚ùå –ó–∞–∫—Ä—ã—Ç"
print(f"üîé –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–∞ {WEBAPP_PORT}: {port_status}")
logging.info(f"üîé –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–∞ {WEBAPP_PORT}: {port_status}")


# === 6Ô∏è‚É£ –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)

    try:
        app = loop.run_until_complete(main())  # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞

        if not IS_LOCAL:
            print(f"üöÄ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä –Ω–∞ {WEBAPP_HOST}:{WEBAPP_PORT}")
            logging.info(f"üöÄ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä –Ω–∞ {WEBAPP_HOST}:{WEBAPP_PORT}")
            web.run_app(app, host="0.0.0.0", port=80, access_log=logging)

        # üî• –î–µ—Ä–∂–∏–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∂–∏–≤—ã–º
        while True:
            print("‚ôªÔ∏è –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç, Amvera –Ω–µ —É–±–∏–≤–∞–π –µ–≥–æ!")
            time.sleep(30)

    except Exception as e:
        error_message = traceback.format_exc()
        logging.error(f"‚ùå –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}\n{error_message}")
