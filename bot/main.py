import time
import traceback
import socket
import asyncio
import sys
import os
import logging
from aiohttp import web
from setup import bot, dp
from handlers.start import start_router
from handlers.generate import generate_router
from handlers.check import check_router
from handlers.common import common_router
from handlers.help import help_router
from database.database import init_db
from utils.logger import setup_logging  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ

setup_logging()  # –ó–∞–ø—É—Å–∫ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è

sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

IS_LOCAL = os.getenv("LOCAL_RUN", "false").lower() == "true"

WEBHOOK_HOST = os.getenv("WEBHOOK_URL", "https://namehuntbot-panarini.amvera.io").strip()
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}".replace("http://", "https://")

WEBAPP_HOST = "0.0.0.0"
WEBAPP_PORT = int(os.getenv("WEBHOOK_PORT", 80))


def is_port_in_use(port):
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        return s.connect_ex(("0.0.0.0", port)) == 0


if is_port_in_use(WEBAPP_PORT):
    logging.error(f"‚ùå –ü–æ—Ä—Ç {WEBAPP_PORT} —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º!")
    sys.exit(1)


async def on_startup():
    print(f"üîó –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫: {WEBHOOK_URL}")
    await init_db()

    dp.include_router(start_router)
    dp.include_router(help_router)
    dp.include_router(check_router)
    dp.include_router(generate_router)
    dp.include_router(common_router)

    if IS_LOCAL:
        await bot.delete_webhook()
        logging.info("üõë Webhook –æ—Ç–∫–ª—é—á—ë–Ω! –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ Polling.")
    else:
        try:
            await bot.delete_webhook()
            logging.info(f"üîç Webhook Host: {WEBHOOK_HOST}")
            logging.info(f"üîç Webhook Path: {WEBHOOK_PATH}")
            print(f"üîç –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Webhook –ø–æ –∞–¥—Ä–µ—Å—É: {WEBHOOK_URL}")
            logging.info(f"üìå Webhook URL –ø–µ—Ä–µ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π: {WEBHOOK_URL}")

            if not WEBHOOK_URL.startswith("https://"):
                logging.error("‚ùå –û—à–∏–±–∫–∞: Webhook URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å HTTPS!")

            await bot.set_webhook(WEBHOOK_URL)
            logging.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ Webhook: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ Webhook: {e}")
            sys.exit(1)


async def on_shutdown(_):
    logging.info("üö® –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –ó–∞–∫—Ä—ã–≤–∞—é —Å–µ—Å—Å–∏—é...")
    try:
        await bot.session.close()
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–µ—Å—Å–∏–∏: {e}")
    logging.info("‚úÖ –°–µ—Å—Å–∏—è –∑–∞–∫—Ä—ã—Ç–∞.")


async def handle_update(request):
    logging.info(f"üì© –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –æ—Ç Telegram: {await request.text()}")
    update = await request.json()
    await dp.feed_update(bot=bot, update=update)
    return web.Response()


async def handle_root(request):
    logging.info("‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω GET-–∑–∞–ø—Ä–æ—Å –Ω–∞ /")
    return web.Response(text="‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!", content_type="text/plain")


async def log_all_requests(app, handler):
    async def middleware_handler(request):
        logging.info(f"üì• –í—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å: {request.method} {request.path}")
        return await handler(request)

    return middleware_handler


async def main():
    await on_startup()

    if IS_LOCAL:
        await dp.start_polling(bot)
    else:
        app = web.Application(middlewares=[log_all_requests])
        app.add_routes([
            web.get("/", handle_root),
            web.post("/webhook", handle_update)
        ])
        app.on_shutdown.append(on_shutdown)
        return app


async def start_server():
    try:
        app = await main()

        if IS_LOCAL:
            return

        runner = web.AppRunner(app)
        await runner.setup()
        site = web.TCPSite(runner, "0.0.0.0", WEBAPP_PORT)
        await site.start()
        logging.info("‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ AppRunner")
        print("‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ AppRunner")

        if is_port_in_use(WEBAPP_PORT):
            logging.info(f"üü¢ –ü–æ—Ä—Ç {WEBAPP_PORT} —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç –∏ —Å–ª—É—à–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã.")
            print(f"üü¢ –ü–æ—Ä—Ç {WEBAPP_PORT} —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç –∏ —Å–ª—É—à–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã.")
        else:
            logging.error(f"‚ùå –ü–æ—Ä—Ç {WEBAPP_PORT} –ù–ï –æ—Ç–∫—Ä—ã—Ç! –í–æ–∑–º–æ–∂–Ω–æ, Amvera –µ–≥–æ –Ω–µ –≤–∏–¥–∏—Ç.")
            print(f"‚ùå –ü–æ—Ä—Ç {WEBAPP_PORT} –ù–ï –æ—Ç–∫—Ä—ã—Ç! –í–æ–∑–º–æ–∂–Ω–æ, Amvera –µ–≥–æ –Ω–µ –≤–∏–¥–∏—Ç.")

        # üí° –§–∏–∫—Å: –î–µ—Ä–∂–∏–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∂–∏–≤—ã–º
        while True:
            await asyncio.sleep(30)

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        sys.exit(1)


async def handle_exception(loop, context):
    logging.error(f"‚ùå –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ asyncio: {context['message']}")
    print(f"‚ùå –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ asyncio: {context['message']}")
    sys.exit(1)


loop = asyncio.new_event_loop()
asyncio.set_event_loop(loop)
loop.set_exception_handler(handle_exception)

loop.run_until_complete(start_server())
