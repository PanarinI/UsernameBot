import time
import traceback
import socket
import asyncio
import sys
import os
import logging
from aiohttp import web
from setup import bot, dp
from handlers.start import start_router
from handlers.generate import generate_router
from handlers.check import check_router
from handlers.common import common_router
from handlers.help import help_router
from database.database import init_db
from utils.logger import setup_logging  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ

setup_logging()  # –ó–∞–ø—É—Å–∫ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è

sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

# === 1Ô∏è‚É£ –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã ===
IS_LOCAL = os.getenv("LOCAL_RUN", "false").lower() == "true"

# === 2Ô∏è‚É£ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Webhook ===
WEBHOOK_HOST = os.getenv("WEBHOOK_URL", "https://namehuntbot-panarini.amvera.io").strip()
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}".replace("http://", "https://")

# === 3Ô∏è‚É£ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Web-—Å–µ—Ä–≤–µ—Ä–∞ ===
WEBAPP_HOST = "0.0.0.0"
WEBAPP_PORT = int(os.getenv("WEBHOOK_PORT", 80))


# === 4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç –ª–∏ –ø–æ—Ä—Ç ===
def is_port_in_use(port):
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        return s.connect_ex(("0.0.0.0", port)) == 0


if is_port_in_use(WEBAPP_PORT):
    logging.error(f"‚ùå –ü–æ—Ä—Ç {WEBAPP_PORT} —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º!")
    sys.exit(1)


# === 5Ô∏è‚É£ –§—É–Ω–∫—Ü–∏–∏ —Å—Ç–∞—Ä—Ç–∞ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ ===
async def on_startup():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    print(f"üîó –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫: {WEBHOOK_URL}")
    await init_db()

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    dp.include_router(start_router)
    dp.include_router(help_router)
    dp.include_router(check_router)
    dp.include_router(generate_router)
    dp.include_router(common_router)

    if IS_LOCAL:
        await bot.delete_webhook()
        logging.info("üõë Webhook –æ—Ç–∫–ª—é—á—ë–Ω! –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ Polling.")
    else:
        try:
            await bot.delete_webhook()
            logging.info(f"üîç Webhook Host: {WEBHOOK_HOST}")
            logging.info(f"üîç Webhook Path: {WEBHOOK_PATH}")
            print(f"üîç –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Webhook –ø–æ –∞–¥—Ä–µ—Å—É: {WEBHOOK_URL}")
            logging.info(f"üìå Webhook URL –ø–µ—Ä–µ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π: {WEBHOOK_URL}")
            if not WEBHOOK_URL.startswith("https://"):
                logging.error("‚ùå –û—à–∏–±–∫–∞: Webhook URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å HTTPS!")

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Webhook
            await bot.set_webhook(WEBHOOK_URL)
            logging.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")

        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ Webhook: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ Webhook: {e}")
            sys.exit(1)  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –∑–∞–ø—É—Å–∫, –µ—Å–ª–∏ Webhook –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è



async def on_shutdown(_):
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
    logging.info("üö® –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –ó–∞–∫—Ä—ã–≤–∞—é —Å–µ—Å—Å–∏—é...")
    try:
        await bot.session.close()
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–µ—Å—Å–∏–∏: {e}")
    logging.info("‚úÖ –°–µ—Å—Å–∏—è –∑–∞–∫—Ä—ã—Ç–∞.")


# === 6Ô∏è‚É£ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ ===
async def handle_update(request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ Webhook (–ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã –æ—Ç Telegram)"""
    logging.info(f"üì© –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –æ—Ç Telegram: {await request.text()}")
    update = await request.json()
    await dp.feed_update(bot=bot, update=update)
    return web.Response()


async def handle_root(request):
    logging.info("‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω GET-–∑–∞–ø—Ä–æ—Å –Ω–∞ /")
    return web.Response(text="‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!", content_type="text/plain")


# === 7Ô∏è‚É£ –õ–æ–≥–∏—Ä—É–µ–º –í–°–ï –∑–∞–ø—Ä–æ—Å—ã ===
async def log_all_requests(app, handler):
    async def middleware_handler(request):
        logging.info(f"üì• –í—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å: {request.method} {request.path}")
        return await handler(request)

    return middleware_handler


# === 8Ô∏è‚É£ –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –±–æ—Ç–∞ ===
async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    await on_startup()

    if IS_LOCAL:
        await dp.start_polling(bot)  # –ï—Å–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ ‚Üí Polling
    else:
        # –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä–Ω—ã–π —Ä–µ–∂–∏–º ‚Üí Webhook
        app = web.Application(middlewares=[log_all_requests])
        app.add_routes([
            web.get("/", handle_root),
            web.post("/webhook", handle_update)
        ])
        app.on_shutdown.append(on_shutdown)

        return app


# === 9Ô∏è‚É£ –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä —á–µ—Ä–µ–∑ AppRunner (—É—Å—Ç–æ–π—á–∏–≤—ã–π –∑–∞–ø—É—Å–∫) ===
async def start_server():
    try:
        app = await main()

        if IS_LOCAL:
            return  # Polling ‚Üí –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º

        runner = web.AppRunner(app)
        await runner.setup()
        site = web.TCPSite(runner, "0.0.0.0", WEBAPP_PORT)
        await site.start()
        logging.info("‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ AppRunner")
        print("‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ AppRunner")

        # üîé –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Ä—Ç 80 —Ä–µ–∞–ª—å–Ω–æ –æ—Ç–∫—Ä—ã—Ç
        if is_port_in_use(WEBAPP_PORT):
            logging.info(f"üü¢ –ü–æ—Ä—Ç {WEBAPP_PORT} —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç –∏ —Å–ª—É—à–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã.")
            print(f"üü¢ –ü–æ—Ä—Ç {WEBAPP_PORT} —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç –∏ —Å–ª—É—à–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã.")
        else:
            logging.error(f"‚ùå –ü–æ—Ä—Ç {WEBAPP_PORT} –ù–ï –æ—Ç–∫—Ä—ã—Ç! –í–æ–∑–º–æ–∂–Ω–æ, Amvera –µ–≥–æ –Ω–µ –≤–∏–¥–∏—Ç.")
            print(f"‚ùå –ü–æ—Ä—Ç {WEBAPP_PORT} –ù–ï –æ—Ç–∫—Ä—ã—Ç! –í–æ–∑–º–æ–∂–Ω–æ, Amvera –µ–≥–æ –Ω–µ –≤–∏–¥–∏—Ç.")

        # üî• –î–µ—Ä–∂–∏–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∞–∫—Ç–∏–≤–Ω—ã–º
        while True:
            await asyncio.sleep(30)  # –≠—Ç–æ—Ç —Ü–∏–∫–ª –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –Ω–µ –¥–∞—Å—Ç –ø—Ä–æ—Ü–µ—Å—Å—É —É–º–µ—Ä–µ—Ç—å

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        sys.exit(1)


# === üîü –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ ===
async def handle_exception(loop, context):
    logging.error(f"‚ùå –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ asyncio: {context['message']}")
    print(f"‚ùå –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ asyncio: {context['message']}")
    sys.exit(1)


loop = asyncio.new_event_loop()
asyncio.set_event_loop(loop)
loop.set_exception_handler(handle_exception)

loop.run_until_complete(start_server())
