import asyncio
from aiogram import Router, types, F, Bot
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from .states import CheckUsernameStates
from keyboards.check import check_result_kb
from keyboards.main_menu import main_menu_kb, back_to_main_kb
from services.check import check_multiple_usernames  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∏–º–ø–æ—Ä—Ç
import re
import logging

check_router = Router()  # –°–æ–∑–¥–∞—ë–º Router


### ‚úÖ 1. –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–û–ú–ê–ù–î–´ /check
@check_router.message(Command("check"))
async def cmd_check_slash(message: types.Message, state: FSMContext):
    await state.clear()
    await asyncio.sleep(0.05)

    await message.answer("–í–≤–µ–¥–∏—Ç–µ username –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–±–µ–∑ @):",
                         reply_markup=back_to_main_kb()
    )
    await state.set_state(CheckUsernameStates.waiting_for_username)


### ‚úÖ 2. –û–ë–†–ê–ë–û–¢–ß–ò–ö INLINE-–ö–ù–û–ü–ö–ò "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å username"
@check_router.callback_query(F.data == "check")
async def cmd_check(query: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await asyncio.sleep(0.05)

    await query.message.answer("–í–≤–µ–¥–∏—Ç–µ username –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–±–µ–∑ @):",
                               reply_markup=back_to_main_kb()
    )
    await state.set_state(CheckUsernameStates.waiting_for_username)
    await query.answer()


### ‚úÖ 3. –ü–†–û–í–ï–†–ö–ê –ö–û–†–†–ï–ö–¢–ù–û–°–¢–ò –í–í–ï–î–ï–ù–ù–û–ì–û USERNAME
def is_valid_username(username: str) -> bool:
    pattern = r"^(?!.*__)[a-zA-Z0-9](?:[a-zA-Z0-9_]{3,30})[a-zA-Z0-9]$"
    return bool(re.match(pattern, username))


### ‚úÖ 4. –û–ë–†–ê–ë–û–¢–ß–ò–ö –í–í–û–î–ê USERNAME + –ó–ê–©–ò–¢–ê –û–¢ –ö–û–ú–ê–ù–î
@check_router.message(CheckUsernameStates.waiting_for_username)
async def check_username(message: types.Message, bot: Bot, state: FSMContext):
    username = message.text.strip()
    logging.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ username: @{username}")

    if username.startswith("/"):
        await state.clear()
        await message.answer("‚ö†Ô∏è –í—ã –≤–≤–µ–ª–∏ –∫–æ–º–∞–Ω–¥—É –≤–º–µ—Å—Ç–æ username. –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∑–∞–Ω–æ–≤–æ.")
        return

    if not is_valid_username(username):
        await message.answer(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π username. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:\n"
            "1. –î–ª–∏–Ω–∞ –æ—Ç 5 –¥–æ 32 —Å–∏–º–≤–æ–ª–æ–≤.\n"
            "2. –¢–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –Ω–∏–∂–Ω–µ–µ –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏–µ (–Ω–æ –Ω–µ –≤ –Ω–∞—á–∞–ª–µ, –Ω–µ –≤ –∫–æ–Ω—Ü–µ –∏ –Ω–µ –±–æ–ª—å—à–µ 1 –ø–æ–¥—Ä—è–¥).\n"
            "3. –ù–µ—Ç –ø—Ä–æ–±–µ–ª–æ–≤, –¥–µ—Ñ–∏—Å–æ–≤, —Ç–æ—á–µ–∫ –∏–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:"
        )
        return

    # ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–¥–Ω–æ–≥–æ username —á–µ—Ä–µ–∑ check_multiple_usernames
    results = await check_multiple_usernames([username], save_to_db=True)
    result = results.get(username, "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å")

    if result == "–°–≤–æ–±–æ–¥–Ω–æ":
        await message.answer(f"‚úÖ –ò–º—è @{username} —Å–≤–æ–±–æ–¥–Ω–æ!", reply_markup=check_result_kb())
    elif result == "–ó–∞–Ω—è—Ç–æ":
        await message.answer(f"‚ùå –ò–º—è @{username} –∑–∞–Ω—è—Ç–æ.", reply_markup=check_result_kb())
    elif result == "–ü—Ä–æ–¥–∞–Ω–æ":
        await message.answer(f"üí∞ –ò–º—è @{username} —É–∂–µ –ø—Ä–æ–¥–∞–Ω–æ.", reply_markup=check_result_kb())
    elif result == "–î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –ø–æ–∫—É–ø–∫–∏":
        fragment_url = f"https://fragment.com/username/{username}"
        await message.answer(
            f"–ò–º—è @{username} –∑–∞–Ω—è—Ç–æ, –Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ [–Ω–∞ Fragment]({fragment_url}).",
            reply_markup=check_result_kb(),
            parse_mode="Markdown"
        )
    else:
        await message.answer(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å @{username}.", reply_markup=check_result_kb())

    await state.clear()


### ‚úÖ 5. –í–û–ó–í–†–ê–¢ –í –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ
@check_router.callback_query(F.data == "back_to_main")
async def back_to_main(query: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await asyncio.sleep(0.05)

    await query.message.answer(
        "–¢—ã —Å–Ω–æ–≤–∞ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Ç—Ä–æ–ø–µ.",
        reply_markup=main_menu_kb()
    )
    await query.answer()
