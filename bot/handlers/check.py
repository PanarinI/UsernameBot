import asyncio
import logging
import re
import time
from aiogram import Router, types, F, Bot
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from .states import CheckUsernameStates
from keyboards.check import check_result_kb
from keyboards.main_menu import main_menu_kb, back_to_main_kb
from services.check import check_username_availability


check_router = Router()  # –°–æ–∑–¥–∞—ë–º Router


### ‚úÖ 1. –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–û–ú–ê–ù–î–´ /check
@check_router.message(Command("check"))
async def cmd_check_slash(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /check.
    """
    logging.info(f"üì© –ö–æ–º–∞–Ω–¥–∞ /check –æ—Ç {message.from_user.username} (id={message.from_user.id})")

    await state.clear()  # ‚õî –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º –í–°–ï —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await asyncio.sleep(0.05)  # üîÑ –î–∞–µ–º FSM –≤—Ä–µ–º—è —Å–±—Ä–æ—Å–∏—Ç—å—Å—è

    await message.answer("–í–≤–µ–¥–∏—Ç–µ username –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–±–µ–∑ @):",
                         reply_markup=back_to_main_kb() # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "üîô –í –º–µ–Ω—é"
    )
    await state.set_state(CheckUsernameStates.waiting_for_username)

### ‚úÖ 2. –û–ë–†–ê–ë–û–¢–ß–ò–ö INLINE-–ö–ù–û–ü–ö–ò "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å username"
@check_router.callback_query(F.data == "check")
async def cmd_check(query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å username".
    """
    logging.info(f"üì© –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å username' –æ—Ç {query.from_user.username} (id={query.from_user.id})")

    await state.clear()  # ‚õî –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –Ω–æ–≤–æ–π –∫–æ–º–∞–Ω–¥–æ–π
    await asyncio.sleep(0.05)  # üîÑ –î–∞–µ–º FSM –≤—Ä–µ–º—è –æ—á–∏—Å—Ç–∏—Ç—å—Å—è

    await query.message.answer("–í–≤–µ–¥–∏—Ç–µ username –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–±–µ–∑ @):",
                               reply_markup=back_to_main_kb()
    )
    await state.set_state(CheckUsernameStates.waiting_for_username)
    await query.answer()

### ‚úÖ 3. –ü–†–û–í–ï–†–ö–ê –ö–û–†–†–ï–ö–¢–ù–û–°–¢–ò –í–í–ï–î–ï–ù–ù–û–ì–û USERNAME
def is_valid_username(username: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ username –ø—Ä–∞–≤–∏–ª–∞–º Telegram, –≤ —Ç.—á. –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∏ –Ω–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ –Ω–∏–∂–Ω–µ–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ.
    """
    # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
    pattern = r"^(?!_)[a-zA-Z0-9_]{5,32}(?<!_)$"
    return bool(re.match(pattern, username))


### ‚úÖ 4. –û–ë–†–ê–ë–û–¢–ß–ò–ö –í–í–û–î–ê USERNAME
@check_router.message(CheckUsernameStates.waiting_for_username)
async def check_username(message: types.Message, bot: Bot, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ username.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å username.
    """

    username = message.text.strip()
    check_start = time.time()  # ‚úÖ –§–∏–∫—Å–∏—Ä—É–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏

    logging.info(f"üîç –ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ username: @{username} (–æ—Ç {message.from_user.username}, id={message.from_user.id})")

    # ‚ùóÔ∏è –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –ö–û–ú–ê–ù–î–£ –≤ —ç—Ç–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ ‚Äì —Å–±—Ä–∞—Å—ã–≤–∞–µ–º FSM –∏ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤–≤–æ–¥
    if username.startswith("/"):
        await state.clear()
        await message.answer("‚ö†Ô∏è –í—ã –≤–≤–µ–ª–∏ –∫–æ–º–∞–Ω–¥—É –≤–º–µ—Å—Ç–æ username. –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∑–∞–Ω–æ–≤–æ.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å username
    if not is_valid_username(username):
        await message.answer(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π username. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:\n"
            "1. –î–ª–∏–Ω–∞ username –æ—Ç 5 –¥–æ 32 —Å–∏–º–≤–æ–ª–æ–≤.\n"
            "2. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã (a-z, A-Z), —Ü–∏—Ñ—Ä—ã (0-9) –∏ –Ω–∏–∂–Ω–µ–µ –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏–µ (_).\n"
            "3. –ù–µ—Ç –ø—Ä–æ–±–µ–ª–æ–≤, –¥–µ—Ñ–∏—Å–æ–≤, —Ç–æ—á–µ–∫ –∏–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:"
        )
        return


    # –ï—Å–ª–∏ username –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º username
    logging.info(f"üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º @{username} —á–µ—Ä–µ–∑ Telegram API –∏ Fragment...") # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ–≤–µ—Ä–∫–∏
    waiting_message = await message.answer("‚åõ –ü—Ä–æ–≤–µ—Ä—è—é..")     # ‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    result = await check_username_availability(username, save_to_db=True)
    logging.info(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {time.time() - check_start:.2f} —Å–µ–∫. –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")

    # ‚úÖ –ó–∞—â–∏—Ç–∞ –æ—Ç None
    if result is None:
        logging.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å username @{username}.")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å username. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # üõë –ï—Å–ª–∏ Telegram API –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –∑–∞–ø—Ä–æ—Å—ã
    if result.startswith("FLOOD_CONTROL"):
        retry_seconds = int(result.split(":")[1])
        hours = retry_seconds // 3600
        minutes = (retry_seconds % 3600) // 60

        logging.warning(f"üö´ Telegram API –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ –Ω–∞ {hours}—á {minutes}–º")

        await message.answer(
            f"üö´ –ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ Telegram API –∏–∑-–∑–∞ —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫.\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ {hours} —á {minutes} –º–∏–Ω.",
            reply_markup=main_menu_kb()  # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        )

        await state.clear()  # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        return

    # üü¢ –õ–æ–≥–∏–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤
    logging.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ @{username}: {result}")

    if result == "–°–≤–æ–±–æ–¥–Ω–æ":
        await message.answer(f"‚úÖ –ò–º—è @{username} —Å–≤–æ–±–æ–¥–Ω–æ!", reply_markup=check_result_kb())
    elif result == "–ó–∞–Ω—è—Ç–æ":
        await message.answer(f"‚ùå –ò–º—è @{username} –∑–∞–Ω—è—Ç–æ.", reply_markup=check_result_kb())
    elif result == "–ü—Ä–æ–¥–∞–Ω–æ":
        await message.answer(f"üí∞ –ò–º—è @{username} —É–∂–µ –ø—Ä–æ–¥–∞–Ω–æ –∏ –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.", reply_markup=check_result_kb())
    elif result == "–î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –ø–æ–∫—É–ø–∫–∏":
        fragment_url = f"https://fragment.com/username/{username}"
        await message.answer(
            f"–ò–º—è @{username} –∑–∞–Ω—è—Ç–æ, –Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ [–Ω–∞ Fragment]({fragment_url}).",
            reply_markup=check_result_kb(),
            parse_mode="Markdown"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML –¥–ª—è —Å—Å—ã–ª–∫–∏
        )
    elif result == "–°–≤–æ–±–æ–¥–Ω–æ, –Ω–æ –Ω–µ –Ω–∞ –ø—Ä–æ–¥–∞–∂–µ":
        await message.answer(f"‚úÖ –ò–º—è @{username} —Å–≤–æ–±–æ–¥–Ω–æ!", reply_markup=check_result_kb())
    elif result == "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ":
        await message.answer(f"‚ö†Ô∏è –ò–º—è @{username} –∑–∞–Ω—è—Ç–æ, –Ω–æ –Ω–µ –ø—Ä–æ–¥–∞—ë—Ç—Å—è (Not for sale).", reply_markup=check_result_kb())
    else:
        await message.answer(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å @{username}.", reply_markup=check_result_kb())

    await state.clear()  # ‚õîÔ∏è –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏


### ‚úÖ 5. –í–û–ó–í–†–ê–¢ –í –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ
@check_router.callback_query(F.data == "back_to_main")
async def back_to_main(query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é".
    """
    logging.info(f"üîô {query.from_user.username} –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")

    await state.clear()  # ‚õî –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º
    await asyncio.sleep(0.05)

    await query.message.answer(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=main_menu_kb()  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    )
    await query.answer()
