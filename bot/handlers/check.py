import asyncio
from aiogram import Router, types, F, Bot
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from .states import CheckUsernameStates
from keyboards.check import check_result_kb
from keyboards.main_menu import main_menu
from services.check import check_username_availability
import re

check_router = Router()  # –°–æ–∑–¥–∞—ë–º Router




### ‚úÖ 1. –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–û–ú–ê–ù–î–´ /check
@check_router.message(Command("check"))
async def cmd_check_slash(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /check.
    """
    await state.clear()  # ‚õî –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º –í–°–ï —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await asyncio.sleep(0.05)  # üîÑ –î–∞–µ–º FSM –≤—Ä–µ–º—è —Å–±—Ä–æ—Å–∏—Ç—å—Å—è

    await message.answer("–í–≤–µ–¥–∏—Ç–µ username –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–±–µ–∑ @):")
    await state.set_state(CheckUsernameStates.waiting_for_username)

### ‚úÖ 2. –û–ë–†–ê–ë–û–¢–ß–ò–ö INLINE-–ö–ù–û–ü–ö–ò "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å username"
@check_router.callback_query(F.data == "check")
async def cmd_check(query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å username".
    """
    await state.clear()  # ‚õî –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –Ω–æ–≤–æ–π –∫–æ–º–∞–Ω–¥–æ–π
    await asyncio.sleep(0.05)  # üîÑ –î–∞–µ–º FSM –≤—Ä–µ–º—è –æ—á–∏—Å—Ç–∏—Ç—å—Å—è

    await query.message.answer("–í–≤–µ–¥–∏—Ç–µ username –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–±–µ–∑ @):")
    await state.set_state(CheckUsernameStates.waiting_for_username)
    await query.answer()


### ‚úÖ 3. –ü–†–û–í–ï–†–ö–ê –ö–û–†–†–ï–ö–¢–ù–û–°–¢–ò –í–í–ï–î–ï–ù–ù–û–ì–û USERNAME
def is_valid_username(username: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ username –ø—Ä–∞–≤–∏–ª–∞–º Telegram.
    """
    pattern = r"^[a-zA-Z0-9_]{5,32}$"
    return bool(re.match(pattern, username))


### ‚úÖ 4. –û–ë–†–ê–ë–û–¢–ß–ò–ö –í–í–û–î–ê USERNAME + –ó–ê–©–ò–¢–ê –û–¢ –ö–û–ú–ê–ù–î
@check_router.message(CheckUsernameStates.waiting_for_username)
async def check_username(message: types.Message, bot: Bot, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ username.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å username.
    """

    username = message.text.strip()

    # ‚ùóÔ∏è –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –ö–û–ú–ê–ù–î–£ –≤ —ç—Ç–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ ‚Äì —Å–±—Ä–∞—Å—ã–≤–∞–µ–º FSM –∏ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤–≤–æ–¥
    if username.startswith("/"):
        await state.clear()
        await message.answer("‚ö†Ô∏è –í—ã –≤–≤–µ–ª–∏ –∫–æ–º–∞–Ω–¥—É –≤–º–µ—Å—Ç–æ username. –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∑–∞–Ω–æ–≤–æ.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å username
    if not is_valid_username(username):
        await message.answer(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π username. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:\n"
            "1. –î–ª–∏–Ω–∞ username –æ—Ç 5 –¥–æ 32 —Å–∏–º–≤–æ–ª–æ–≤.\n"
            "2. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã (a-z, A-Z), —Ü–∏—Ñ—Ä—ã (0-9) –∏ –Ω–∏–∂–Ω–µ–µ –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏–µ (_).\n"
            "3. –ù–µ—Ç –ø—Ä–æ–±–µ–ª–æ–≤, –¥–µ—Ñ–∏—Å–æ–≤, —Ç–æ—á–µ–∫ –∏–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:"
        )
        return

    # –ï—Å–ª–∏ username –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
    result = await check_username_availability(bot, username)
    if result == "–°–≤–æ–±–æ–¥–Ω–æ":
        await message.answer(
            f"‚úÖ –ò–º—è @{username} —Å–≤–æ–±–æ–¥–Ω–æ!",
            reply_markup=check_result_kb()  # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        )
    elif result == "–ó–∞–Ω—è—Ç–æ":
        await message.answer(
            f"‚ùå –ò–º—è @{username} –∑–∞–Ω—è—Ç–æ.",
            reply_markup=check_result_kb()  # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        )
    else:
        await message.answer(
            f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å @{username}.",
            reply_markup=check_result_kb()  # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        )

    await state.clear()  # ‚õîÔ∏è –§–∏–∫—Å: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏


### ‚úÖ 5. –í–û–ó–í–†–ê–¢ –í –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ
@check_router.callback_query(F.data == "back_to_main")
async def back_to_main(query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é".
    """
    await state.clear()  # ‚õî –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º
    await asyncio.sleep(0.05)

    await query.message.answer(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=main_menu()  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    )
    await query.answer()
