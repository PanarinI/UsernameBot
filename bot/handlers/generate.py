import logging
import asyncio
import re
from aiogram import Bot, Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from services.generate import get_available_usernames
from keyboards.generate import generate_username_kb, error_retry_kb, styles_kb, initial_styles_kb
from keyboards.main_menu import main_menu_kb, back_to_main_kb
from .states import GenerateUsernameStates
import config


generate_router = Router()


### ‚úÖ 1. –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–ù–û–ü–ö–ò "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å username"
@generate_router.callback_query(F.data == "generate")
async def cmd_generate_username(query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å username".
    """
    logging.info(f"üì© –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å username' –æ—Ç {query.from_user.username} (id={query.from_user.id})")

    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –Ω–æ–≤–æ–π –∫–æ–º–∞–Ω–¥–æ–π
    await asyncio.sleep(0.05)  # ‚úÖ –î–∞–µ–º FSM –≤—Ä–µ–º—è —Å–±—Ä–æ—Å–∏—Ç—å—Å—è
    await query.message.answer(
        "üîÆ –û —á—ë–º –¥–æ–ª–∂–Ω–æ –≥–æ–≤–æ—Ä–∏—Ç—å –∏–º—è? –û–ø–∏—à–∏ —Ç–µ–º—É, –∏ —è –ø–æ–π–º–∞—é —Ç—Ä–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–º–µ–Ω–∏.\n"
        "üìñ <i>–ù–∞–ø—Ä–∏–º–µ—Ä: ¬´–∑–∞–≥–∞–¥–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏¬ª, ¬´—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–µ –∫–æ—Ç–∏–∫–∏¬ª, –¥–∞ —á—Ç–æ —É–≥–æ–¥–Ω–æ</i>",
        parse_mode="HTML",
        reply_markup=back_to_main_kb()
    )

    await state.set_state(GenerateUsernameStates.waiting_for_context)
    await query.answer()  # Telegram —Ç—Ä–µ–±—É–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, —á—Ç–æ callback –æ–±—Ä–∞–±–æ—Ç–∞–Ω.


### ‚úÖ 2. –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–û–ú–ê–ù–î–´ /generate
@generate_router.message(Command("generate"))  # –§–∏–ª—å—Ç—Ä —á—Ç–æ–±—ã /generate —Å—Ä–∞–±–∞—Ç—ã–≤–∞–ª –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
async def cmd_generate_slash(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /generate.
    """
    logging.info(f"üì© –ö–æ–º–∞–Ω–¥–∞ /generate –æ—Ç {message.from_user.username} (id={message.from_user.id})")

    await state.clear()  # ‚õîÔ∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º –í–°–ï —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await asyncio.sleep(0.1)  # üîÑ –î–∞—ë–º FSM –≤—Ä–µ–º—è —Å–±—Ä–æ—Å–∏—Ç—å—Å—è

    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É/–∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ username:", reply_markup=back_to_main_kb())
    await state.set_state(GenerateUsernameStates.waiting_for_context)


### ‚úÖ 3. –û–ë–†–ê–ë–û–¢–ß–ò–ö –í–í–û–î–ê –ö–û–ù–¢–ï–ö–°–¢–ê
@generate_router.message(GenerateUsernameStates.waiting_for_context)
async def process_context_input(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞. –¢–µ–ø–µ—Ä—å –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ —Ç–µ–º—ã –ø–æ—è–≤–ª—è–µ—Ç—Å—è 2 –≤–∞—Ä–∏–∞–Ω—Ç–∞:
    - –ë–µ–∑ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è (–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ä–∞–∑—É)
    - –í—ã–±—Ä–∞—Ç—å —Å—Ç–∏–ª—å (–æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –≤—Ç–æ—Ä–æ–µ –º–µ–Ω—é)
    """
    context_text = message.text.strip()
    logging.info(f"üìù –í–≤–µ–¥—ë–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç: '{context_text}' (–æ—Ç {message.from_user.username}, id={message.from_user.id})")

    # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    if len(context_text) > config.MAX_CONTEXT_LENGTH:
        logging.warning(f"‚ö†Ô∏è –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π ({len(context_text)} —Å–∏–º–≤–æ–ª–æ–≤), –æ–±—Ä–µ–∑–∞–µ–º –¥–æ {config.MAX_CONTEXT_LENGTH}.")
        await message.answer(f"‚ö†Ô∏è –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –û–±—Ä–µ–∑–∞—é –¥–æ {config.MAX_CONTEXT_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤.")
        context_text = context_text[:config.MAX_CONTEXT_LENGTH]

    # ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ FSM, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è
    await state.update_data(context=context_text)

    # ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–≤—É–º—è –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
    await message.answer(
        "üé≠ –ö–∞–∫ –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å –∏–º—è?",
        reply_markup=initial_styles_kb()  # –ú–µ–Ω—é –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è
    )

    await state.set_state(GenerateUsernameStates.waiting_for_style)

## –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–ù–û–ü–ö–ò –ë–ï–ó –í–´–ë–û–†–ê –°–¢–ò–õ–Ø
@generate_router.callback_query(GenerateUsernameStates.waiting_for_style)
async def process_style_choice(query: types.CallbackQuery, state: FSMContext, bot: Bot):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä: —Å—Ä–∞–∑—É –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –±–µ–∑ —Å—Ç–∏–ª—è –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å —Å—Ç–∏–ª—å.
    """
    selected_option = query.data  # –ü–æ–ª—É—á–∞–µ–º callback_data

    if selected_option == "no_style":
        # ‚úÖ –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å—Ä–∞–∑—É, –ø–µ—Ä–µ–¥–∞—ë–º style=None
        await start_generation(query, state, bot, style=None)

    elif selected_option == "choose_style":
        # ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è (–≤—ã–±–æ—Ä —Å—Ç–∏–ª—è)
        await query.message.edit_text(
            "üé≠ –í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:",
            reply_markup=styles_kb()
        )

    elif selected_option == "back_to_main_style_menu":
        # ‚úÖ –í–µ—Ä–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è
        await query.message.edit_text(
            "üé≠ –ö–∞–∫ –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å –∏–º—è?",
            reply_markup=initial_styles_kb()
        )

    else:
        # ‚úÖ –í—ã–±—Ä–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å—Ç–∏–ª—å ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
        await start_generation(query, state, bot, style=selected_option)



def contains_cyrillic(text: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã."""
    return bool(re.search(r'[–∞-—è–ê-–Ø]', text))


def escape_md(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2"""
    if not text:
        return ""
    return re.sub(r'([_*[\]()~`>#+-=|{}.!])', r'\\\1', text)


async def start_generation(query: types.CallbackQuery, state: FSMContext, bot: Bot, style: str | None):
    """
    –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ username (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å—Ç–∏–ª—è, –∏ –±–µ–∑).
    """
    data = await state.get_data()
    context_text = data.get("context", "")

    if not context_text:
        logging.error("‚ö†Ô∏è –û—à–∏–±–∫–∞: –ö–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏!")
        await query.message.answer(
            "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–º—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
            reply_markup=main_menu_kb()
        )
        await state.clear()
        return

    logging.info(f"üöÄ –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ username –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É '{context_text}' –∏ —Å—Ç–∏–ª—é '{style}'")

    # ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    try:
        waiting_message = await query.message.answer("‚åõ –í—ã—Å–ª–µ–∂–∏–≤–∞—é... –ü—Ä–∏—Å–ª—É—à–∏–≤–∞—é—Å—å –∫ —Ü–∏—Ñ—Ä–æ–≤–æ–º—É —ç—Ñ–∏—Ä—É...")
        logging.info("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        return

    # ‚úÖ –í—ã–∑—ã–≤–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
    logging.info("üîÑ –í—ã–∑—ã–≤–∞–µ–º get_available_usernames()...")

    try:
        raw_usernames = await asyncio.wait_for(
            get_available_usernames(bot, context_text, style, config.AVAILABLE_USERNAME_COUNT),
            timeout=config.GEN_TIMEOUT
        )

        logging.info(f"‚úÖ –û—Ç–≤–µ—Ç AI –¥–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {raw_usernames}")

        # üö® –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–∫–∞–∑ AI (–¥–æ –æ—á–∏—Å—Ç–∫–∏)
        usernames_cleaned = [u.strip() for u in raw_usernames if u.strip()]  # –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        response_text = " ".join(usernames_cleaned).lower()

        # üö® –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –í–ï–°–¨ –°–ü–ò–°–û–ö username —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –æ—Ç–∫–∞–∑–æ–≤
        if all(any(phrase in username.lower() for phrase in ["–Ω–µ –º–æ–≥—É", "–ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—Ç", "–∏–∑–≤–∏–Ω–∏—Ç–µ", "—ç—Ç–æ –∑–∞–ø—Ä–µ—â–µ–Ω–æ", "–Ω–µ –¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è"]) for username in usernames_cleaned):
            logging.warning(f"‚ùå AI –æ—Ç–∫–∞–∑–∞–ª—Å—è –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å username (–∫–æ–Ω—Ç–µ–∫—Å—Ç: '{context_text}', —Å—Ç–∏–ª—å: '{style}').")
            await query.message.answer(
                "‚ùå AI –æ—Ç–∫–∞–∑–∞–ª—Å—è –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–º–µ–Ω–∞ –ø–æ —ç—Ç–∏—á–µ—Å–∫–∏–º —Å–æ–æ–±—Ä–∞–∂–µ–Ω–∏—è–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å.",
                reply_markup=error_retry_kb()
            )
            await state.clear()  # ‚õî –ß–∏—Å—Ç–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏—è
            return  # ‚õî –°–†–ê–ó–£ –í–´–•–û–î–ò–ú! –ù–∏–∫–∞–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é!



        # ‚úÖ –¢–µ–ø–µ—Ä—å –æ—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç –º—É—Å–æ—Ä–∞ (–ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏, –ø—Ä–æ–±–µ–ª—ã)
        usernames = [u.strip() for u in raw_usernames if u.strip()]

        logging.info(f"‚úÖ –ò—Ç–æ–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ username (–ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏): {usernames}")

    except asyncio.TimeoutError:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞: –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ username –∏—Å—Ç–µ–∫–ª–æ (–∫–æ–Ω—Ç–µ–∫—Å—Ç: '{context_text}', —Å—Ç–∏–ª—å: '{style}').")
        await query.message.answer("‚è≥ –ò–º—è–ª–æ–≤ –∏—Å–∫–∞–ª –∏–º–µ–Ω–∞ —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=main_menu_kb())
        await state.clear()
        return

    logging.info(f"üìú –ü–æ–ª—É—á–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ usernames: {usernames}")

    # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ username –≤—Å—ë —Ä–∞–≤–Ω–æ –ø—É—Å—Ç–æ–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥—Ä—É–≥—É—é –æ—à–∏–±–∫—É
    if not usernames:
        logging.warning(f"‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è username –Ω–µ –¥–∞–ª–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–∫–æ–Ω—Ç–µ–∫—Å—Ç: '{context_text}', —Å—Ç–∏–ª—å: '{style}').")
        await query.message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–π–º–∞—Ç—å –∏–º–µ–Ω–∞. –í–æ–∑–º–æ–∂–Ω–æ, —Ç–µ–º–∞ —Å–ª–∏—à–∫–æ–º –ø–æ–ø—É–ª—è—Ä–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á—É—Ç—å –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ —Å—Ç–∏–ª—å!",
            reply_markup=error_retry_kb()
        )
        return

    logging.info(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(usernames)} username: {usernames}")

    kb_usernames = generate_username_kb(usernames)

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç–∏–ª—å –≤ —Ä—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
    style_rus = config.STYLE_TRANSLATIONS.get(style, style or "")

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏
    text = f"–í–æ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ {'–≤ —Å—Ç–∏–ª–µ *' + escape_md(style_rus) + '*' if style else ''} –Ω–∞ —Ç–µ–º—É *{escape_md(context_text)}*:"

    await query.message.answer(
        text,
        parse_mode="MarkdownV2",
        reply_markup=kb_usernames
    )

    logging.info("‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
    await state.clear()

