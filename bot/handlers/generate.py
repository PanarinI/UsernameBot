import logging
import asyncio
from aiogram import Bot, Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from services.generate import get_available_usernames
from keyboards.generate import generate_username_kb, error_retry_kb, styles_kb
from .states import GenerateUsernameStates
import config
from keyboards.main_menu import main_menu_kb, back_to_main_kb
from aiogram.exceptions import TelegramRetryAfter

generate_router = Router()


### ‚úÖ 1. –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–ù–û–ü–ö–ò "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å username"
@generate_router.callback_query(F.data == "generate")
async def cmd_generate_username(query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å username".
    """
    logging.info(f"üì© –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å username' –æ—Ç {query.from_user.username} (id={query.from_user.id})")

    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –Ω–æ–≤–æ–π –∫–æ–º–∞–Ω–¥–æ–π
    await asyncio.sleep(0.05)  # ‚úÖ –î–∞–µ–º FSM –≤—Ä–µ–º—è —Å–±—Ä–æ—Å–∏—Ç—å—Å—è
    await query.message.answer(
        "üîÆ –û —á—ë–º –¥–æ–ª–∂–Ω–æ –≥–æ–≤–æ—Ä–∏—Ç—å –∏–º—è? –û–ø–∏—à–∏ —Ç–µ–º—É, –∏ —è –ø–æ–π–º–∞—é —Ç—Ä–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–º–µ–Ω–∏.\n"
        "üìñ <i>–ù–∞–ø—Ä–∏–º–µ—Ä: ¬´–∑–∞–≥–∞–¥–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏¬ª, ¬´—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–µ –∫–æ—Ç–∏–∫–∏¬ª, –¥–∞ —á—Ç–æ —É–≥–æ–¥–Ω–æ</i>",
        parse_mode="HTML",
        reply_markup=back_to_main_kb()
    )

    await state.set_state(GenerateUsernameStates.waiting_for_context)
    await query.answer()  # Telegram —Ç—Ä–µ–±—É–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, —á—Ç–æ callback –æ–±—Ä–∞–±–æ—Ç–∞–Ω.


### ‚úÖ 2. –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–û–ú–ê–ù–î–´ /generate
@generate_router.message(Command("generate"))  # –§–∏–ª—å—Ç—Ä —á—Ç–æ–±—ã /generate —Å—Ä–∞–±–∞—Ç—ã–≤–∞–ª –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
async def cmd_generate_slash(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /generate.
    """
    logging.info(f"üì© –ö–æ–º–∞–Ω–¥–∞ /generate –æ—Ç {message.from_user.username} (id={message.from_user.id})")

    await state.clear()  # ‚õîÔ∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º –í–°–ï —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await asyncio.sleep(0.1)  # üîÑ –î–∞—ë–º FSM –≤—Ä–µ–º—è —Å–±—Ä–æ—Å–∏—Ç—å—Å—è

    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É/–∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ username:", reply_markup=back_to_main_kb())
    await state.set_state(GenerateUsernameStates.waiting_for_context)


### ‚úÖ 3. –û–ë–†–ê–ë–û–¢–ß–ò–ö –í–í–û–î–ê –ö–û–ù–¢–ï–ö–°–¢–ê
from keyboards.generate import styles_kb  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ —Å—Ç–∏–ª–µ–π

@generate_router.message(GenerateUsernameStates.waiting_for_context)
async def process_context_input(message: types.Message, bot: Bot, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –µ–≥–æ –¥–ª–∏–Ω—É, –∑–∞—Ç–µ–º –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å —Å—Ç–∏–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.
    """
    context_text = message.text.strip()
    logging.info(f"üìù –í–≤–µ–¥—ë–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç: '{context_text}' (–æ—Ç {message.from_user.username}, id={message.from_user.id})")

    # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    if len(context_text) > config.MAX_CONTEXT_LENGTH:
        logging.warning(f"‚ö†Ô∏è –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π ({len(context_text)} —Å–∏–º–≤–æ–ª–æ–≤), –æ–±—Ä–µ–∑–∞–µ–º –¥–æ {config.MAX_CONTEXT_LENGTH}.")
        await message.answer(f"‚ö†Ô∏è –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –û–±—Ä–µ–∑–∞—é –¥–æ {config.MAX_CONTEXT_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤.")
        context_text = context_text[:config.MAX_CONTEXT_LENGTH]

    # ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ FSM, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è
    await state.update_data(context=context_text)

    # ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º —Å—Ç–∏–ª—è
    await message.answer(
        "üé≠ –í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å, –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏–º—è:",
        reply_markup=styles_kb()  # –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ —Å–æ —Å—Ç–∏–ª—è–º–∏
    )

    await state.set_state(GenerateUsernameStates.waiting_for_style)

@generate_router.callback_query(GenerateUsernameStates.waiting_for_style)
async def process_style_selection(query: types.CallbackQuery, state: FSMContext, bot: Bot):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è: –ø–æ–ª—É—á–∞–µ—Ç —Å—Ç–∏–ª—å, –∑–∞–ø—É—Å–∫–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é username.
    """
    selected_style = query.data  # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∏–ª—å –∏–∑ callback_data
    logging.info(f"üé≠ –í—ã–±—Ä–∞–Ω —Å—Ç–∏–ª—å: {selected_style} (–æ—Ç {query.from_user.username}, id={query.from_user.id})")

    # ‚úÖ –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ FSM
    data = await state.get_data()
    context_text = data.get("context", "")

    if not context_text:
        logging.error("‚ö†Ô∏è –û—à–∏–±–∫–∞: –ö–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏!")
        await query.message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–º—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", reply_markup=main_menu_kb())
        await state.clear()
        return

    # ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    waiting_message = await query.message.answer("‚åõ –í—ã—Å–ª–µ–∂–∏–≤–∞—é... –ü—Ä–∏—Å–ª—É—à–∏–≤–∞—é—Å—å –∫ —Ü–∏—Ñ—Ä–æ–≤–æ–º—É —ç—Ñ–∏—Ä—É...")

    try:
        logging.info(f"üöÄ –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ username –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É '{context_text}' –∏ —Å—Ç–∏–ª—é '{selected_style}'")
        usernames = await asyncio.wait_for(
            get_available_usernames(bot, context_text, selected_style, config.AVAILABLE_USERNAME_COUNT),
            timeout=config.GEN_TIMEOUT
        )

    except asyncio.TimeoutError:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞: –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ username –∏—Å—Ç–µ–∫–ª–æ (–∫–æ–Ω—Ç–µ–∫—Å—Ç: '{context_text}', —Å—Ç–∏–ª—å: '{selected_style}').")
        await query.message.answer("‚è≥ –ò–º—è–ª–æ–≤ –∏—Å–∫–∞–ª –∏–º–µ–Ω–∞ —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=main_menu_kb())
        await state.clear()
        return

    # ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É API
    if isinstance(usernames, str) and usernames.startswith("FLOOD_CONTROL"):
        retry_seconds = int(usernames.split(":")[1])
        logging.warning(f"üö® Telegram API –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ –Ω–∞ {retry_seconds} —Å–µ–∫—É–Ω–¥.")
        await query.message.answer(f"üö´ –°–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ {retry_seconds // 60} –º–∏–Ω—É—Ç.", reply_markup=main_menu_kb())
        await state.clear()
        return

    # ‚úÖ –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if not usernames:
        logging.warning(f"‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è username –Ω–µ –¥–∞–ª–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–∫–æ–Ω—Ç–µ–∫—Å—Ç: '{context_text}', —Å—Ç–∏–ª—å: '{selected_style}').")
        await query.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–π–º–∞—Ç—å –∏–º–µ–Ω–∞. –í–æ–∑–º–æ–∂–Ω–æ, —Ç–µ–º–∞ —Å–ª–∏—à–∫–æ–º –ø–æ–ø—É–ª—è—Ä–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Å—Ç–∏–ª—å!", reply_markup=error_retry_kb())
        return

    logging.info(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(usernames)} username: {usernames}")

    # ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    kb_usernames = generate_username_kb(usernames)
    await query.message.answer(
        f"–í–æ—Ç —Ç—Ä–∏ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∏–º–µ–Ω–∏ –≤ —Å—Ç–∏–ª–µ *{selected_style}* –Ω–∞ —Ç–µ–º—É *{context_text}*:",
        parse_mode="MarkdownV2",
        reply_markup=kb_usernames
    )

    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

