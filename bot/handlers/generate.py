import logging
import asyncio
from aiogram import Bot, Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from services.generate import get_available_usernames
from keyboards.generate import generate_username_kb, error_retry_kb
from .states import GenerateUsernameStates
import config
from keyboards.main_menu import main_menu_kb, back_to_main_kb
from aiogram.exceptions import TelegramRetryAfter

generate_router = Router()


### ‚úÖ 1. –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–ù–û–ü–ö–ò "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å username"
@generate_router.callback_query(F.data == "generate")
async def cmd_generate_username(query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å username".
    """
    logging.info(f"üì© –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å username' –æ—Ç {query.from_user.username} (id={query.from_user.id})")

    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –Ω–æ–≤–æ–π –∫–æ–º–∞–Ω–¥–æ–π
    await asyncio.sleep(0.05)  # ‚úÖ –î–∞–µ–º FSM –≤—Ä–µ–º—è —Å–±—Ä–æ—Å–∏—Ç—å—Å—è
    await query.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É/–∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ username (–º–∞–∫—Å. 200 –∑–Ω–∞–∫–æ–≤):",
                               reply_markup=back_to_main_kb())
    await state.set_state(GenerateUsernameStates.waiting_for_context)
    await query.answer()  # Telegram —Ç—Ä–µ–±—É–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, —á—Ç–æ callback –æ–±—Ä–∞–±–æ—Ç–∞–Ω.


### ‚úÖ 2. –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–û–ú–ê–ù–î–´ /generate
@generate_router.message(Command("generate"))  # –§–∏–ª—å—Ç—Ä —á—Ç–æ–±—ã /generate —Å—Ä–∞–±–∞—Ç—ã–≤–∞–ª –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
async def cmd_generate_slash(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /generate.
    """
    logging.info(f"üì© –ö–æ–º–∞–Ω–¥–∞ /generate –æ—Ç {message.from_user.username} (id={message.from_user.id})")

    await state.clear()  # ‚õîÔ∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º –í–°–ï —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await asyncio.sleep(0.1)  # üîÑ –î–∞—ë–º FSM –≤—Ä–µ–º—è —Å–±—Ä–æ—Å–∏—Ç—å—Å—è

    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É/–∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ username:", reply_markup=back_to_main_kb())
    await state.set_state(GenerateUsernameStates.waiting_for_context)


### ‚úÖ 3. –û–ë–†–ê–ë–û–¢–ß–ò–ö –í–í–û–î–ê –ö–û–ù–¢–ï–ö–°–¢–ê
@generate_router.message(GenerateUsernameStates.waiting_for_context)
async def process_context_input(message: types.Message, bot: Bot, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –µ–≥–æ –¥–ª–∏–Ω—É –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é username.
    """
    context_text = message.text.strip()
    logging.info(f"üìù –í–≤–µ–¥—ë–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç: '{context_text}' (–æ—Ç {message.from_user.username}, id={message.from_user.id})")

    # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    if len(context_text) > config.MAX_CONTEXT_LENGTH:
        logging.warning(
            f"‚ö†Ô∏è –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π ({len(context_text)} —Å–∏–º–≤–æ–ª–æ–≤), –æ–±—Ä–µ–∑–∞–µ–º –¥–æ {config.MAX_CONTEXT_LENGTH}.")

        await message.answer(
            f"‚ö†Ô∏è –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π ({len(context_text)} —Å–∏–º–≤–æ–ª–æ–≤). "
            f"–û–±—Ä–µ–∑–∞—é –¥–æ {config.MAX_CONTEXT_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤."
        )

        context_text = context_text[:config.MAX_CONTEXT_LENGTH]

    # ‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    waiting_message = await message.answer("‚åõ –ì–µ–Ω–µ—Ä–∏—Ä—É—é...")

    try:
        logging.info(f"üöÄ –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ username –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É: '{context_text}'")
        usernames = await asyncio.wait_for(
            get_available_usernames(bot, context_text, n=config.AVAILABLE_USERNAME_COUNT),
            timeout=config.GEN_TIMEOUT
        )

        # üõë Telegram API –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞
        if isinstance(usernames, str) and usernames.startswith("FLOOD_CONTROL"):
            retry_seconds = int(usernames.split(":")[1])
            logging.warning(f"üö® –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ API Telegram! –û–∂–∏–¥–∞–Ω–∏–µ {retry_seconds} —Å–µ–∫—É–Ω–¥.")

            await message.answer(
                f"‚è≥ –ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∑–∞ —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã.\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ {retry_seconds // 60} –º–∏–Ω.",
                reply_markup=main_menu_kb()
            )
            await state.clear()
            return

    except asyncio.TimeoutError:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞: –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ username –∏—Å—Ç–µ–∫–ª–æ (–∫–æ–Ω—Ç–µ–∫—Å—Ç: '{context_text}').")
        await message.answer("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è username –∑–∞–Ω—è–ª–∞ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                             reply_markup=main_menu_kb())
        await state.clear()
        return

    # ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É Telegram API
    if isinstance(usernames, str) and usernames.startswith("FLOOD_CONTROL"):
        retry_after = usernames.split(":")[1]
        logging.warning(f"üö´ Telegram API –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ –Ω–∞ {retry_after} —Å–µ–∫—É–Ω–¥.")
        await message.answer(
            f"üö´ –ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ Telegram API –∏–∑-–∑–∞ —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ {retry_after} —Å–µ–∫—É–Ω–¥.",
            reply_markup=main_menu_kb()
        )
        await state.clear()
        return

    # ‚úÖ –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    if not usernames:
        logging.warning(f"‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è username –Ω–µ –¥–∞–ª–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–∫–æ–Ω—Ç–µ–∫—Å—Ç: '{context_text}').")
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ username. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=error_retry_kb()
        )
        return  # –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ

    logging.info(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(usernames)} username: {usernames}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø–∏—Å–æ–∫ username
    kb_usernames = generate_username_kb(usernames)
    await message.answer(
        f"–í–æ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∞—Å username –ø–æ —Ç–µ–º–µ '{context_text}':",
        reply_markup=kb_usernames
    )
    await state.clear()
