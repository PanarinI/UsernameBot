from aiogram import Bot, Router, types, F
import asyncio
import logging
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from services.generate import get_available_usernames
from keyboards.generate import generate_username_kb, error_retry_kb
from .states import GenerateUsernameStates
import config
from keyboards.main_menu import main_menu

generate_router = Router()

@generate_router.callback_query(F.data == "generate")
async def cmd_generate_username(query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å username".
    """
    await state.clear()  # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –Ω–æ–≤–æ–π –∫–æ–º–∞–Ω–¥–æ–π
    await asyncio.sleep(0.05)  # ‚úÖ –î–∞–µ–º FSM –≤—Ä–µ–º—è —Å–±—Ä–æ—Å–∏—Ç—å—Å—è
    await query.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É/–∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ username:")
    await state.set_state(GenerateUsernameStates.waiting_for_context)
    await query.answer()  # Telegram —Ç—Ä–µ–±—É–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, —á—Ç–æ callback –æ–±—Ä–∞–±–æ—Ç–∞–Ω.


@generate_router.message(Command("generate")) # —Ñ–∏–ª—å—Ç—Ä —á—Ç–æ–±—ã /generate —Å—Ä–∞–±–∞—Ç—ã–≤–∞–ª –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
async def cmd_generate_slash(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /generate.
    –í—ã–∑—ã–≤–∞–µ—Ç —Ç—É –∂–µ –ª–æ–≥–∏–∫—É, —á—Ç–æ –∏ inline-–∫–Ω–æ–ø–∫–∞.
    """
    await state.clear()  # ‚õîÔ∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º –í–°–ï —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await asyncio.sleep(0.1)  # üîÑ –î–∞—ë–º FSM –≤—Ä–µ–º—è —Å–±—Ä–æ—Å–∏—Ç—å—Å—è

    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É/–∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ username:")
    await state.set_state(GenerateUsernameStates.waiting_for_context)


@generate_router.message(GenerateUsernameStates.waiting_for_context)
async def process_context_input(message: types.Message, bot: Bot, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç username.
    """
    context_text = message.text.strip()
    try:
        usernames = await asyncio.wait_for(
            get_available_usernames(bot, context_text, n=config.AVAILABLE_USERNAME_COUNT),
            timeout=config.GEN_TIMEOUT
        )
    except asyncio.TimeoutError:
        logging.info("–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ username –∏—Å—Ç–µ–∫–ª–æ.")
        await message.answer("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è username –∑–∞–Ω—è–ª–∞ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=main_menu())
        await state.clear()
        return

    if not usernames:
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ username. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=error_retry_kb()
        )
        return  # –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ

    kb = generate_username_kb(usernames)
    await message.answer(
        f"–í–æ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∞—Å username –ø–æ —Ç–µ–º–µ '{context_text}':",
        reply_markup=kb
    )
    await state.clear()
