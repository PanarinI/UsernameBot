from aiogram import Bot, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.exceptions import TelegramBadRequest
import re
import aiohttp
import ssl

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
class UsernameCheck(StatesGroup):
    waiting_for_username = State()

async def handle_check_command(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /check –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è username"""
    await message.reply("üîç –í–≤–µ–¥–∏—Ç–µ username, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å:")
    await state.set_state(UsernameCheck.waiting_for_username)

async def handle_username_input(message: Message, bot: Bot, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥—ë–Ω–Ω—ã–π username"""
    username = message.text.strip().replace("@", "")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç username
    if not re.match(r"^[a-zA-Z0-9_]{5,32}$", username) or "__" in username or username.startswith("_") or username.endswith("_"):
        await message.reply(
            "‚ùå –û—à–∏–±–∫–∞: username –¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º:\n"
            "‚úÖ –õ–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ `_`\n"
            "‚úÖ –î–ª–∏–Ω–∞: 5-32 —Å–∏–º–≤–æ–ª–∞\n"
            "‚úÖ –ù–µ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è –∏ –Ω–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è `_`\n"
            "‚úÖ –ù–µ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¥–≤–∞ –ø–æ–¥—Ä—è–¥ `_`"
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å username
    status = await check_username_availability(bot, username)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    responses = {
        "–°–≤–æ–±–æ–¥–Ω–æ": f"‚úÖ –ò–º—è @{username} —Å–≤–æ–±–æ–¥–Ω–æ!",
        "–ó–∞–Ω—è—Ç–æ": f"‚ùå –ò–º—è @{username} —É–∂–µ –∑–∞–Ω—è—Ç–æ.",
        "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å": f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏ @{username}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    }
    await message.reply(responses[status])

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

async def check_username_availability(bot: Bot, username: str) -> str:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–≤–æ–±–æ–¥–µ–Ω –ª–∏ —é–∑–µ—Ä–Ω–µ–π–º –≤ Telegram —á–µ—Ä–µ–∑ API –∏ t.me."""
    print(f"\n[STEP 1] üîé –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É username: @{username}")

    try:
        print("[STEP 2] üîπ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ Telegram API...")
        await bot.get_chat(f"@{username}")  # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —á–∞—Ç
        print(f"[RESULT] ‚ùå –ò–º—è @{username} –∑–∞–Ω—è—Ç–æ (–Ω–∞–π–¥–µ–Ω–æ —á–µ—Ä–µ–∑ API).")
        return "–ó–∞–Ω—è—Ç–æ"

    except TelegramBadRequest as e:
        error_message = str(e).lower()
        print(f"[INFO] ‚ùó –û—à–∏–±–∫–∞ API: {error_message}")

        if "chat not found" in error_message:
            print(f"[STEP 3] üîπ –ò–º—è @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ API. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–æ–≤–µ—Ä–∫–µ —á–µ—Ä–µ–∑ t.me...")
            return await check_username_via_web(username)

        print(f"[ERROR] ‚ùó –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ API: {error_message}")
        return "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å"

async def check_username_via_web(username: str) -> str:
    """–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ t.me/{username} —Å –∞–Ω–∞–ª–∏–∑–æ–º HTML-–∫–æ–¥–∞."""
    url = f"https://t.me/{username}"
    print("[STEP 4] üîπ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ t.me...")

    ssl_context = ssl.create_default_context()
    ssl_context.check_hostname = False
    ssl_context.verify_mode = ssl.CERT_NONE

    async with aiohttp.ClientSession() as session:
        async with session.get(url, ssl=ssl_context) as response:
            text = await response.text()

            if response.status == 404:
                print(f"[RESULT] ‚úÖ –ò–º—è @{username} —Å–≤–æ–±–æ–¥–Ω–æ (–ø—Ä–æ–≤–µ—Ä–µ–Ω–æ —á–µ—Ä–µ–∑ t.me)")
                return "–°–≤–æ–±–æ–¥–Ω–æ"

            title_match = re.search(r"<title>(.*?)</title>", text, re.IGNORECASE)
            title_text = title_match.group(1) if title_match else ""

            if "tgme_page_title" in text or "If you have Telegram, you can contact" in text:
                print(f"[RESULT] ‚ùå –ò–º—è @{username} –∑–∞–Ω—è—Ç–æ (–ø—Ä–æ–≤–µ—Ä–µ–Ω–æ —á–µ—Ä–µ–∑ t.me)")
                return "–ó–∞–Ω—è—Ç–æ"

            if f"Telegram: Contact @{username}" in title_text and "tgme_page_title" not in text:
                print(f"[RESULT] ‚úÖ –ò–º—è @{username} —Å–≤–æ–±–æ–¥–Ω–æ (–ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É, –Ω–æ –±–µ–∑ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –ø—Ä–æ—Ñ–∏–ª—è)")
                return "–°–≤–æ–±–æ–¥–Ω–æ"

            print(f"[WARNING] ‚ö†Ô∏è –ù–µ–ø–æ–Ω—è—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç t.me –¥–ª—è @{username}: {response.status}, HTML: {text[:500]}")
            return "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å"
