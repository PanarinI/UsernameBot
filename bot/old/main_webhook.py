import time
import traceback
import socket
import asyncio
import sys
import os
import logging
from aiohttp import web
from setup import bot, dp
from aiogram.types import Update
from handlers.start import start_router
from handlers.generate import generate_router
from handlers.check import check_router
from handlers.common import common_router
from handlers.help import help_router
from database.database import init_db
from utils.logger import setup_logging

# ‚úÖ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
setup_logging()

sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

# === üîç –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã ===
IS_LOCAL = os.getenv("LOCAL_RUN", "false").lower() == "true"

# === üåç –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Webhook ===
WEBHOOK_HOST = os.getenv("WEBHOOK_URL", "https://namehuntbot-panarini.amvera.io").strip()
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}".replace("http://", "https://")

# === üåê –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Web-—Å–µ—Ä–≤–µ—Ä–∞ ===
WEBAPP_HOST = "0.0.0.0"
WEBAPP_PORT = int(os.getenv("WEBHOOK_PORT", 80))

# === üîé –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–∞ ===
def is_port_in_use(port):
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        return s.connect_ex(("0.0.0.0", port)) == 0

# === üöÄ –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ ===
async def on_startup():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    logging.info(f"üîó –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫: {WEBHOOK_URL}")
    await init_db()

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    dp.include_router(start_router)
    dp.include_router(help_router)
    dp.include_router(check_router)
    dp.include_router(generate_router)
    dp.include_router(common_router)

    if IS_LOCAL:
        await bot.delete_webhook()
        logging.info("üõë Webhook –æ—Ç–∫–ª—é—á—ë–Ω! –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ Polling.")
    else:
        try:
            await bot.delete_webhook()
            logging.info(f"üîç Webhook Host: {WEBHOOK_HOST}")
            logging.info(f"üîç Webhook Path: {WEBHOOK_PATH}")
            logging.info(f"üìå Webhook URL –ø–µ—Ä–µ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π: {WEBHOOK_URL}")

            if not WEBHOOK_URL.startswith("https://"):
                logging.error("‚ùå –û—à–∏–±–∫–∞: Webhook URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å HTTPS!")

            await bot.set_webhook(WEBHOOK_URL)
            logging.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ Webhook: {e}")
            sys.exit(1)  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –∑–∞–ø—É—Å–∫

# === üõë –§—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞ ===
async def on_shutdown(_):
    logging.info("üö® –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –ó–∞–∫—Ä—ã–≤–∞—é —Å–µ—Å—Å–∏—é...")
    try:
        await bot.session.close()
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–µ—Å—Å–∏–∏: {e}")
    logging.info("‚úÖ –°–µ—Å—Å–∏—è –∑–∞–∫—Ä—ã—Ç–∞.")

# === üì© –û–±—Ä–∞–±–æ—Ç—á–∏–∫ Webhook ===
async def handle_update(request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ Webhook (–ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã –æ—Ç Telegram)"""
    time_start = time.time()

    try:
        update_data = await request.json()

        if "callback_query" in update_data:
            callback = update_data["callback_query"]
            user = callback["from"]
            message = callback.get("message", {})

            clean_log = (
                f"üì© Callback: {callback['data']}\n"
                f"üë§ –û—Ç: {user.get('first_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')} (@{user.get('username', '–ù–µ—Ç —é–∑–µ—Ä–Ω–µ–π–º–∞')})\n"
                f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {message.get('text', '–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞')}"
            )
            logging.info(clean_log)

        update = Update(**update_data)
        await dp.feed_update(bot=bot, update=update)

        time_end = time.time()
        logging.info(f"‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∑–∞–Ω—è–ª–∞ {time_end - time_start:.4f} —Å–µ–∫—É–Ω–¥")
        return web.Response()

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Webhook: {e}", exc_info=True)
        return web.Response(status=500)


async def handle_root(request):
    logging.info("‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω GET-–∑–∞–ø—Ä–æ—Å –Ω–∞ /")
    return web.Response(text="‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!", content_type="text/plain")

# === üöÄ –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ ===
async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    await on_startup()

    if IS_LOCAL:
        await dp.start_polling(bot)
    else:
        app = web.Application()
        app.add_routes([
            web.get("/", handle_root),
            web.post("/webhook", handle_update)
        ])
        app.on_shutdown.append(on_shutdown)
        return app

# === üî• –§—É–Ω–∫—Ü–∏—è —Å—Ç–∞—Ä—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞ ===
async def start_server():
    try:
        app = await main()
        if IS_LOCAL:
            return  # –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ ‚Üí Polling

        runner = web.AppRunner(app)
        await runner.setup()
        site = web.TCPSite(runner, "0.0.0.0", WEBAPP_PORT)
        await site.start()

        logging.info("‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ AppRunner")
        print("‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ AppRunner")

        # üîé –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Ä—Ç 80 —Ä–µ–∞–ª—å–Ω–æ –æ—Ç–∫—Ä—ã—Ç
        if is_port_in_use(WEBAPP_PORT):
            logging.info(f"üü¢ –ü–æ—Ä—Ç {WEBAPP_PORT} —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç –∏ —Å–ª—É—à–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã.")
        else:
            logging.error(f"‚ùå –ü–æ—Ä—Ç {WEBAPP_PORT} –ù–ï –æ—Ç–∫—Ä—ã—Ç! –í–æ–∑–º–æ–∂–Ω–æ, Amvera –µ–≥–æ –Ω–µ –≤–∏–¥–∏—Ç.")

        # üî• –î–µ—Ä–∂–∏–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∂–∏–≤—ã–º
        while True:
            logging.info("‚ôªÔ∏è –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∞–∫—Ç–∏–≤–µ–Ω. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑ –≤ 30 —Å–µ–∫—É–Ω–¥.")
            await asyncio.sleep(30)
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        sys.exit(1)

# === üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ ===
loop = asyncio.new_event_loop()
asyncio.set_event_loop(loop)
loop.run_until_complete(start_server())
