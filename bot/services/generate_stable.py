from aiogram import Bot
from openai import OpenAI
from dotenv import load_dotenv
import os
import logging

import config
from services.check import check_username_availability  # –ü—Ä–æ–≤–µ—Ä–∫–∞ username
from handlers.check import is_valid_username  # –í–∞–ª–∏–¥–∞—Ü–∏—è username

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
load_dotenv()
#setup_logging()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª—é—á–µ–π API –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_KEY = os.getenv("API_KEY")
BASE_URL = os.getenv("BASE_URL")

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ OpenAI –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ username
client = OpenAI(api_key=API_KEY, base_url=BASE_URL)

async def generate_username_list(context: str, n: int = config.GENERATED_USERNAME_COUNT) -> list[str]:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç `n` username –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.
    """
    logging.info(f"üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è username: context='{context}', n={n}")

    prompt = config.PROMPT.format(n=n, context=context)

    # –ó–∞–ø—Ä–æ—Å –∫ AI API
    response = client.chat.completions.create(
        model=config.MODEL,
        messages=[{"role": "user", "content": prompt}],
        max_tokens=config.MAX_TOKENS,
        temperature=config.TEMPERATURE,
    )

    logging.debug(f"API Response: {response}")

    # –ï—Å–ª–∏ API –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã–µ, –∏–∑–≤–ª–µ–∫–∞–µ–º username
    if response.choices and response.choices[0].message and response.choices[0].message.content:
        usernames_raw = response.choices[0].message.content.strip()
    else:
        logging.warning("‚ö†Ô∏è API –Ω–µ –≤–µ—Ä–Ω—É–ª username.")
        return []

    # –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞: —Ä–∞–∑–¥–µ–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ –∑–∞–ø—è—Ç—ã–º –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ username
    usernames = [u.strip() for u in usernames_raw.split(",")]
    valid_usernames = [username for username in usernames if is_valid_username(username)]

    return valid_usernames

async def gen_process_and_check(bot: Bot, context: str, n: int = config.AVAILABLE_USERNAME_COUNT) -> list[str]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç `n` –¥–æ—Å—Ç—É–ø–Ω—ã—Ö username, –∏–∑–±–µ–≥–∞—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫.
    """
    logging.info(f"üîé –ü–æ–∏—Å–∫ {n} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö username –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: '{context}'")

    available_usernames = set()
    checked_usernames = set()  # –°–ø–∏—Å–æ–∫ —É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö username
    attempts = 0  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    empty_responses = 0  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É—Å—Ç—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ AI

    while len(available_usernames) < n and attempts < config.GEN_ATTEMPTS:
        attempts += 1
        logging.info(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ {attempts}/{config.GEN_ATTEMPTS}")

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è username
        usernames = await generate_username_list(context, n=config.GENERATED_USERNAME_COUNT)
        logging.debug(f"üìú –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ username: {usernames}")

        # –ï—Å–ª–∏ API –Ω–µ –≤–µ—Ä–Ω—É–ª username
        if not usernames:
            empty_responses += 1
            logging.warning(f"‚ö†Ô∏è AI –Ω–µ –¥–∞–ª username ({empty_responses}/{config.MAX_EMPTY_RESPONSES})")

            # –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø—É—Å—Ç—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
            if empty_responses >= config.MAX_EMPTY_RESPONSES:
                logging.error("‚ùå AI –æ—Ç–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å username. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å.")
                break

            continue

        for username in usernames:
            # –ü—Ä–æ–ø—É—Å–∫ —É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö username
            if username in checked_usernames:
                continue

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö
            checked_usernames.add(username)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
            result = await check_username_availability(bot, username)
            logging.debug(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ username '{username}': {result}")

            if result == "–°–≤–æ–±–æ–¥–Ω–æ":
                available_usernames.add(username)

            # –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö username
            if len(available_usernames) >= n:
                break

    logging.info(f"‚úÖ –ò—Ç–æ–≥–æ–≤—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ username: {available_usernames}")
    return list(available_usernames)

