import asyncio
import aiohttp
import ssl
from aiogram import Bot
from aiogram.exceptions import TelegramBadRequest, TelegramForbiddenError, TelegramRetryAfter
from bs4 import BeautifulSoup
from config import REQUEST_INTERVAL



async def check_username_availability(bot: Bot, username: str) -> str:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–≤–æ–±–æ–¥–µ–Ω –ª–∏ —é–∑–µ—Ä–Ω–µ–π–º –≤ Telegram —á–µ—Ä–µ–∑ API –∏ Fragment."""
    print(f"\n[STEP 1] üîé –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É username: @{username}")

    try:
        print("[STEP 2] üîπ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ Telegram API...")
        await bot.get_chat(f"@{username}")
        print(f"[RESULT] ‚ùå –ò–º—è @{username} –∑–∞–Ω—è—Ç–æ (–Ω–∞–π–¥–µ–Ω–æ —á–µ—Ä–µ–∑ API).")
        return "–ó–∞–Ω—è—Ç–æ"

    except TelegramForbiddenError:
        print(f"[RESULT] ‚ùå –ò–º—è @{username} –∑–∞–Ω—è—Ç–æ (–±–æ—Ç –±—ã–ª –∫–∏–∫–Ω—É—Ç –∏–∑ —á–∞—Ç–∞).")
        return "–ó–∞–Ω—è—Ç–æ"

    except TelegramBadRequest as e:
        error_message = str(e).lower()
        print(f"[INFO] ‚ùó –û—à–∏–±–∫–∞ API: {error_message}")

        if "chat not found" in error_message:
            print(f"[STEP 3] üîπ –ò–º—è @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ API. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ Fragment...")
            return await check_username_via_fragment(username)

        print(f"[ERROR] ‚ùó –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ API: {error_message}")
        return "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å"

    except TelegramRetryAfter as e:
        # –ö–æ–≥–¥–∞ Telegram –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π (flood control)
        retry_after = e.retry_after
        print(f"‚è≥ Flood Control! –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–∞ {retry_after} —Å–µ–∫—É–Ω–¥.")
        await asyncio.sleep(retry_after)  # –ñ–¥–µ–º —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º
        return f"FLOOD_CONTROL:{retry_after}"  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è

    # –î–µ–ª–∞–µ–º –ø–∞—É–∑—É –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (—á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞)
    await asyncio.sleep(REQUEST_INTERVAL)  # –ü–∞—É–∑–∞ 1 —Å–µ–∫—É–Ω–¥–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏


async def check_username_via_fragment(username: str) -> str:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —á–µ—Ä–µ–∑ Fragment. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–¥–∏—Ä–µ–∫—Ç –∏ 'Unavailable'."""
    url_username = f"https://fragment.com/username/{username}"
    url_query = f"https://fragment.com/?query={username}"

    print("[STEP 4] üîπ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Fragment...")

    ssl_context = ssl.create_default_context()
    ssl_context.check_hostname = False
    ssl_context.verify_mode = ssl.CERT_NONE

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url_username, ssl=ssl_context, allow_redirects=True) as response:
                final_url = str(response.url)
                # –ï—Å–ª–∏ –Ω–∞—Å —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏—Ç –Ω–∞ ?query={username}, –∑–Ω–∞—á–∏—Ç –∏–º—è —Å–≤–æ–±–æ–¥–Ω–æ (–Ω–µ 100%, –Ω–æ —Ç–æ—á–Ω–µ–µ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è)
                if final_url == url_query:
                    print(f"[INFO] üîπ Fragment —Å–¥–µ–ª–∞–ª —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–∏—Å–∫–∞ (Unavailable).")
                    return "–°–≤–æ–±–æ–¥–Ω–æ"
                # –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ /username/{username}, –∑–Ω–∞—á–∏—Ç –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Å—Ç–∞—Ç—É—Å
                html = await response.text()
                return await analyze_username_page(html, username)

    except aiohttp.ClientError as e:
        print(f"[ERROR] ‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Fragment: {e}")
        return "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å"


async def analyze_username_page(html: str, username: str) -> str:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —é–∑–µ—Ä–Ω–µ–π–º–∞ –Ω–∞ Fragment."""
    soup = BeautifulSoup(html, 'html.parser')

    status_element = soup.find("span", class_="tm-section-header-status")
    if status_element:
        status_text = status_element.text.strip().lower()

        if "available" in status_text:
            print(f"[RESULT] ‚ö†Ô∏è –ò–º—è @{username} –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –ø–æ–∫—É–ø–∫–∏.")
            return "–î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –ø–æ–∫—É–ø–∫–∏"
        elif "sold" in status_text:
            print(f"[RESULT] ‚ùå –ò–º—è @{username} –ø—Ä–æ–¥–∞–Ω–æ.")
            return "–ü—Ä–æ–¥–∞–Ω–æ"
        elif "taken" in status_text:
            print(f"[RESULT] ‚ùå –ò–º—è @{username} —É–∂–µ –∑–∞–Ω—è—Ç–æ.")
            return "–ó–∞–Ω—è—Ç–æ"

    print(f"[WARNING] ‚ö†Ô∏è –°—Ç–∞—Ç—É—Å Fragment (username) –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω.")
    return "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å"



