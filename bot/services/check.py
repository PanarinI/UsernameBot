import asyncio
import logging

import aiohttp
import ssl
from bs4 import BeautifulSoup
from database.database import save_username_to_db  # –ò–º–ø–æ—Ä—Ç –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
import logging

async def check_multiple_usernames(usernames: list[str], save_to_db: bool = False) -> dict:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–ø–∏—Å–æ–∫ username –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å {username: —Å—Ç–∞—Ç—É—Å}.
    """
    async with aiohttp.ClientSession() as session:
        tasks = [check_username_via_fragment(session, username) for username in usernames]
        results = await asyncio.gather(*tasks)

    availability = dict(zip(usernames, results))

    if save_to_db: # –µ—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω–∞ –Ω–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è, –∞ –æ—Ç–¥–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        tasks = [
            save_username_to_db(username=username, status=status, category="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞",
                                context="–†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞", llm="none")
            for username, status in availability.items()
        ]
        await asyncio.gather(*tasks)  # ‚úÖ –ë–î-–∑–∞–ø—Ä–æ—Å—ã –∏–¥—É—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ

    return availability

async def check_username_via_fragment(session, username: str) -> str:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —á–µ—Ä–µ–∑ Fragment. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–¥–∏—Ä–µ–∫—Ç –∏ 'Unavailable'."""

    # üî• –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é SSL-–∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø—Ä—è–º–æ –≤ —Ñ—É–Ω–∫—Ü–∏—é
    ssl_context = ssl.create_default_context()
    ssl_context.check_hostname = False
    ssl_context.verify_mode = ssl.CERT_NONE

    url_username = f"https://fragment.com/username/{username}"
    url_query = f"https://fragment.com/?query={username}"

    logging.info(f"[CHECK] üîé –ü—Ä–æ–≤–µ—Ä—è–µ–º final=query. if true > —Å–≤–æ–±–æ–¥–Ω–æ @{username}")

    try:
        async with session.get(url_username, ssl=ssl_context, allow_redirects=True) as response:
            final_url = str(response.url)

            if final_url == url_query:
                logging.info(f"[RESULT]üîπ @{username} —Å–≤–æ–±–æ–¥–Ω–æ.")
                return "–°–≤–æ–±–æ–¥–Ω–æ"

            html = await response.text()
            return await analyze_username_page(html, username)

    except Exception as e:
        print(f"[ERROR] ‚ùó –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ @{username}: {e}")
        return "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å"


async def analyze_username_page(html: str, username: str) -> str:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ username –Ω–∞ Fragment."""
    soup = BeautifulSoup(html, 'html.parser')

    status_element = soup.find("span", class_="tm-section-header-status")
    if status_element:
        status_text = status_element.text.strip().lower()

        if "available" in status_text:
            logging.info(f"[RESULT] ‚ö†Ô∏è @{username} –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–∫—É–ø–∫–∏.")
            return "–î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –ø–æ–∫—É–ø–∫–∏"
        elif "sold" in status_text:
            logging.info(f"[RESULT] ‚ùå @{username} –ø—Ä–æ–¥–∞–Ω.")
            return "–ü—Ä–æ–¥–∞–Ω–æ"
        elif "taken" in status_text:
            logging.info(f"[RESULT] ‚ùå @{username} —É–∂–µ –∑–∞–Ω—è—Ç.")
            return "–ó–∞–Ω—è—Ç–æ"

    logging.info(f"[WARNING] ‚ö†Ô∏è –°—Ç–∞—Ç—É—Å @{username} –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω.")
    return "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å"