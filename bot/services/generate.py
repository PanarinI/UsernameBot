from aiogram import Bot
from openai import OpenAI
from dotenv import load_dotenv
import os
import logging
import asyncio
from typing import List
import re
from datetime import datetime

from database.database import save_username_to_db
from services.check import check_multiple_usernames  # –ü—Ä–æ–≤–µ—Ä–∫–∞ username
from handlers.check import is_valid_username   # –í–∞–ª–∏–¥–∞—Ü–∏—è username

import config


# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
load_dotenv()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª—é—á–µ–π API –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_KEY = os.getenv("API_KEY")
BASE_URL = os.getenv("BASE_URL")

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ OpenAI –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ username
client = OpenAI(api_key=API_KEY, base_url=BASE_URL)



REJECTION_PATTERNS = [
    r"–Ω–µ –º–æ–≥—É",
    r"–ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—Ç",
    r"–∏–∑–≤–∏–Ω–∏—Ç–µ",
    r"—ç—Ç–æ –∑–∞–ø—Ä–µ—â–µ–Ω–æ",
    r"–Ω–µ –¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è"
]

def is_rejection_response(usernames: List[str]) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–ø–∏—Å–æ–∫ username —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–∫–∞–∑ –æ—Ç AI.
    """
    for username in usernames:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–∏—Ä–∏–ª–ª–∏—Ü–∞ (–ø—Ä–∏–∑–Ω–∞–∫ —Ç–µ–∫—Å—Ç–∞, –∞ –Ω–µ username)
        if re.search(r'[–∞-—è–ê-–Ø]', username):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —à–∞–±–ª–æ–Ω–æ–≤ –æ—Ç–∫–∞–∑–∞
            if any(re.search(pattern, username.lower()) for pattern in REJECTION_PATTERNS):
                return True
    return False


async def generate_username_list(context: str, style: str | None, n: int = config.GENERATED_USERNAME_COUNT) -> tuple[list[str], str]:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç `n` username –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ —Å—Ç–∏–ª—è (–µ—Å–ª–∏ —Å—Ç–∏–ª—å —É–∫–∞–∑–∞–Ω).
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ username (–∏–ª–∏ —Ç–µ–∫—Å—Ç –æ—Ç–∫–∞–∑–∞) –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é.
    """
    logging.info(f"üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è username: context='{context}', style='{style}', n={n}")

    if style:
        prompt = config.PROMPT_WITH_STYLE.format(n=n, context=context, style=style)
        prompt_type = "WITH STYLE"
    else:
        prompt = config.PROMPT_NO_STYLE.format(n=n, context=context)
        prompt_type = "NO STYLE"

    response = client.chat.completions.create(
        model=config.MODEL,
        messages=[{"role": "user", "content": prompt}],
        max_tokens=config.MAX_TOKENS,
        temperature=config.TEMPERATURE,
    )

    logging.debug(f"API Response: {response}")

    if response.choices and response.choices[0].message and response.choices[0].message.content:
        response_text = response.choices[0].message.content.strip()
        logging.info(f"üìù –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç AI: {response_text}")

        lines = [line.strip() for line in response_text.split("\n") if line.strip()]

        if len(lines) < 2:
            logging.warning("‚ö†Ô∏è API –Ω–µ –≤–µ—Ä–Ω—É–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –±–µ—Ä–µ–º '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'")
            category = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            usernames_raw = lines[0] if lines else ""
        else:
            category = lines[0].replace("–ö–∞—Ç–µ–≥–æ—Ä–∏—è:", "").strip()
            usernames_raw = lines[1]

        raw_usernames = [u.strip() for u in usernames_raw.split(",")]

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–∫–∞–∑ –ø–æ —ç—Ç–∏—á–µ—Å–∫–∏–º —Å–æ–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
        if is_rejection_response(raw_usernames):
            logging.warning("‚ùå AI –≤–µ—Ä–Ω—É–ª —Ç–µ–∫—Å—Ç –æ—Ç–∫–∞–∑–∞ –ø–æ —ç—Ç–∏—á–µ—Å–∫–∏–º —Å–æ–æ–±—Ä–∞–∂–µ–Ω–∏—è–º.")
            return raw_usernames, "–≠—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–∫–∞–∑"

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã—Ö username
        valid_usernames = [username for username in raw_usernames if is_valid_username(username)]
        logging.info(f"‚úÖ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category}, —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ username: {len(valid_usernames)}")

        return valid_usernames, category

    else:
        logging.warning("‚ö†Ô∏è API –Ω–µ –≤–µ—Ä–Ω—É–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
        return [], "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"



async def gen_process_and_check(bot: Bot, context: str, style: str | None, n: int = config.AVAILABLE_USERNAME_COUNT) -> list[str]:
    logging.info(f"üîé –ü–æ–∏—Å–∫ {n} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö username –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: '{context}' —Å–æ —Å—Ç–∏–ª–µ–º: '{style}'")

    available_usernames = set()
    checked_usernames = set()
    attempts = 0
    empty_responses = 0

    # üì¶ –ù–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    total_generated = 0  # –í—Å–µ–≥–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ username
    total_free = 0        # –°–≤–æ–±–æ–¥–Ω—ã–µ username
    total_saved = 0       # –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –≤ –ë–î username

    start_time = datetime.now()  # –ó–∞—Å–µ–∫–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏

    while len(available_usernames) < n and attempts < config.GEN_ATTEMPTS:
        attempts += 1
        logging.info(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ {attempts}/{config.GEN_ATTEMPTS}")

        try:
            usernames, category = await generate_username_list(context, style or "", n=config.GENERATED_USERNAME_COUNT)
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ username —á–µ—Ä–µ–∑ OpenAI: {e}")
            return []

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —ç—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–∫–∞–∑
        if is_rejection_response(usernames):
            logging.warning("‚ùå AI –≤–µ—Ä–Ω—É–ª —Ç–µ–∫—Å—Ç –æ—Ç–∫–∞–∑–∞ –ø–æ —ç—Ç–∏—á–µ—Å–∫–∏–º —Å–æ–æ–±—Ä–∞–∂–µ–Ω–∏—è–º.")
            return []

        # –ï—Å–ª–∏ AI –Ω–µ –≤–µ—Ä–Ω—É–ª username
        if not usernames:
            empty_responses += 1
            logging.warning(f"‚ö†Ô∏è AI –Ω–µ –¥–∞–ª username ({empty_responses}/{config.MAX_EMPTY_RESPONSES})")

            if empty_responses >= config.MAX_EMPTY_RESPONSES:
                logging.error("‚ùå AI –æ—Ç–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å username. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å.")
                break

            continue

        total_generated += len(usernames)  # üì¶ –£—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö username

        valid_usernames = [u for u in usernames if u not in checked_usernames and is_valid_username(u)]
        checked_usernames.update(valid_usernames)

        if not valid_usernames:
            continue

        try:
            check_results = await check_multiple_usernames(valid_usernames)
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ username: {e}")
            continue

        tasks = []
        for username, result in check_results.items():
            if result == "–°–≤–æ–±–æ–¥–Ω–æ" and len(available_usernames) < n:
                available_usernames.add(username)
                total_free += 1  # ‚úÖ –£—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö username

            tasks.append(
                save_username_to_db(username=username, status=result, category=category, context=context, style=style, llm=config.MODEL)
            )

        if tasks:
            try:
                await asyncio.gather(*tasks)
                total_saved += len(tasks)  # üóÑÔ∏è –£—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤ –ë–î
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ –ë–î: {e}")

        if len(available_usernames) >= n:
            break

    duration = (datetime.now() - start_time).total_seconds()  # ‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏

    # üìä –ò—Ç–æ–≥–æ–≤—ã–π –ª–æ–≥
    logging.info(
        f"üìä –ò—Ç–æ–≥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {attempts} –ø–æ–ø—ã—Ç–æ–∫, "
        f"{total_generated} —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ, "
        f"{total_free} —Å–≤–æ–±–æ–¥–Ω—ã—Ö, "
        f"{total_saved} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ë–î, "
        f"{len(available_usernames)} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. "
        f"‚è±Ô∏è {duration:.2f} —Å–µ–∫."
    )

    return list(available_usernames)
