from aiogram import Bot
from openai import OpenAI
from dotenv import load_dotenv
import os
import logging
import config
from services.check import check_username_availability  # –ü—Ä–æ–≤–µ—Ä–∫–∞ username
from handlers.check import is_valid_username  # –í–∞–ª–∏–¥–∞—Ü–∏—è username
from database.database import save_username_to_db
from aiogram.exceptions import TelegramRetryAfter

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
load_dotenv()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª—é—á–µ–π API –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_KEY = os.getenv("API_KEY")
BASE_URL = os.getenv("BASE_URL")

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ OpenAI –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ username
client = OpenAI(api_key=API_KEY, base_url=BASE_URL)

async def generate_usernames(context: str, style: str | None, n: int) -> tuple[list[str], str]:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç `n` username –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Å—Ç–∏–ª–µ (–∏–ª–∏ –±–µ–∑ —Å—Ç–∏–ª—è) –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é.
    """
    logging.info(f"üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è username: context='{context}', style='{style}', n={n}")

    # ‚úÖ –í—ã–±–∏—Ä–∞–µ–º –Ω—É–∂–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    if style:
        prompt = config.PROMPT_WITH_STYLE.format(n=n, context=context, style=style)
    else:
        prompt = config.PROMPT_NO_STYLE.format(n=n, context=context)

    logging.info(f"üìú –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π PROMPT:\n{prompt}")

    response = client.chat.completions.create(
        model=config.MODEL,
        messages=[{"role": "user", "content": prompt}],
        max_tokens=config.MAX_TOKENS,
        temperature=config.TEMPERATURE,
    )

    logging.debug(f"API Response: {response}")

    # ‚úÖ –†–∞–∑–±–∏—Ä–∞–µ–º –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏
    if response.choices and response.choices[0].message and response.choices[0].message.content:
        response_text = response.choices[0].message.content.strip()
        lines = [line.strip() for line in response_text.split("\n") if line.strip()]

        if len(lines) < 2:  # –ï—Å–ª–∏ OpenAI –Ω–µ –≤–µ—Ä–Ω—É–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            logging.warning("‚ö†Ô∏è API –Ω–µ –≤–µ—Ä–Ω—É–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –±–µ—Ä–µ–º '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'")
            category = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            usernames_raw = lines[0] if lines else ""  # –ï—Å–ª–∏ OpenAI –≤–æ–æ–±—â–µ –Ω–∏—á–µ–≥–æ –Ω–µ –≤–µ—Ä–Ω—É–ª
        else:
            # ‚úÖ –£–±–∏—Ä–∞–µ–º "–ö–∞—Ç–µ–≥–æ—Ä–∏—è:" –∏–∑ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏
            category = lines[0].replace("–ö–∞—Ç–µ–≥–æ—Ä–∏—è:", "").strip()
            usernames_raw = lines[1]  # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî —Å–ø–∏—Å–æ–∫ username

        usernames = [u.strip() for u in usernames_raw.split(",")]

        logging.info(f"‚úÖ –ò—Ç–æ–≥–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category}")
        logging.info(f"‚úÖ –ò—Ç–æ–≥–æ–≤—ã–µ username: {usernames}")

        return usernames, category

    else:
        logging.warning("‚ö†Ô∏è API –Ω–µ –≤–µ—Ä–Ω—É–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
        return [], "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"


async def get_available_usernames(bot: Bot, context: str, style: str | None, n: int):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –º–æ–¥–µ–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é username —Å —É—á—ë—Ç–æ–º —Å—Ç–∏–ª—è."""

    # ‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–≤–æ–¥–∏–º n –∫ int, –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –ø—Ä–∏—à–ª–∞ —Å—Ç—Ä–æ–∫–∞
    try:
        n = int(n)
    except ValueError:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞: n –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º, –Ω–æ –ø—Ä–∏—à–ª–æ {type(n)} ({n})")
        n = config.AVAILABLE_USERNAME_COUNT  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    available_usernames = set()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º set, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    checked_usernames = set()  # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π!
    attempts = 0
    empty_responses = 0  # –î–æ–±–∞–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫ –ø—É—Å—Ç—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤

    while len(available_usernames) < n and attempts < config.GEN_ATTEMPTS:
        attempts += 1
        logging.info(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ {attempts}/{config.GEN_ATTEMPTS}")

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è username –∏ category
        try:
            usernames, category = await generate_usernames(context, style or "", n)  # ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ, —á—Ç–æ–±—ã `None` ‚Üí `""`
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ username —á–µ—Ä–µ–∑ OpenAI: {e}")
            return []  # –û—à–∏–±–∫–∞ –≤ API AI - –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é

        if not usernames:
            empty_responses += 1
            logging.warning(f"‚ö†Ô∏è AI –Ω–µ –¥–∞–ª username ({empty_responses}/{config.MAX_EMPTY_RESPONSES})")

            if empty_responses >= config.MAX_EMPTY_RESPONSES:
                logging.error("‚ùå AI –æ—Ç–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å username. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å.")
                break

            continue  # –ü–æ–ø—ã—Ç–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ —Å–ø–∏—Å–∫–∞

        for username in usernames:
            if username in checked_usernames:
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ

            checked_usernames.add(username)

            # ‚úÖ –î–û–ë–ê–í–õ–Ø–ï–ú –ü–†–û–í–ï–†–ö–£ –ù–ê –í–ê–õ–ò–î–ù–û–°–¢–¨ username
            if not is_valid_username(username):
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ username

            try:
                result = await check_username_availability(username)

                # üõë –ï—Å–ª–∏ –ø–æ–π–º–∞–ª–∏ `FLOOD_CONTROL`, —Å—Ä–∞–∑—É –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ, —á—Ç–æ–±—ã –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è
                if result.startswith("FLOOD_CONTROL"):
                    logging.error(f"üö´ Flood Control! –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º: {result}")
                    return result

            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ {username}: {e}")
                continue  # –û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ Fragment –∏–ª–∏ –±–æ—Ç–∞ - –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º

            logging.debug(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ username '{username}': {result}")

            if result == "–°–≤–æ–±–æ–¥–Ω–æ":
                available_usernames.add(username)

            await save_username_to_db(username=username, status=result, category=category, context=context, style=style, llm=config.MODEL)

            if len(available_usernames) >= n:
                break  # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞, –µ—Å–ª–∏ –Ω–∞–±—Ä–∞–ª–∏ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ

        # –ï—Å–ª–∏ –≤—Å–µ –∏–º–µ–Ω–∞ —É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã –∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫
        if len(available_usernames) < n:
            logging.info("üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –∏–º–µ–Ω, —Ç–∞–∫ –∫–∞–∫ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö.")

    if not available_usernames:
        logging.warning("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö username.")

    return list(available_usernames)
