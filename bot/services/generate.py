import os
import time
import logging
from dotenv import load_dotenv
import asyncio
from aiogram import Bot
from openai import OpenAI

from services.check import check_multiple_usernames  # –ü—Ä–æ–≤–µ—Ä–∫–∞ username
from handlers.check import is_valid_username  # –í–∞–ª–∏–¥–∞—Ü–∏—è username
from database.database import save_username_to_db

import config


# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
load_dotenv()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª—é—á–µ–π API –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_KEY = os.getenv("API_KEY")
BASE_URL = os.getenv("BASE_URL")

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ OpenAI –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ username
client = OpenAI(api_key=API_KEY, base_url=BASE_URL)

async def generate_usernames(context: str, style: str | None, n: int) -> tuple[list[str], str]:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç `n` username –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Å—Ç–∏–ª–µ (–∏–ª–∏ –±–µ–∑ —Å—Ç–∏–ª—è) –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é.
    """
    logging.info(f"üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è username: context='{context}', style='{style}', n={n}")

    # ‚úÖ –í—ã–±–∏—Ä–∞–µ–º –Ω—É–∂–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    if style:
        prompt = config.PROMPT_WITH_STYLE.format(n=n, context=context, style=style)
        prompt_type = "WITH STYLE"
    else:
        prompt = config.PROMPT_NO_STYLE.format(n=n, context=context)
        prompt_type = "NO STYLE"


    response = client.chat.completions.create(
        model=config.MODEL,
        messages=[{"role": "user", "content": prompt}],
        max_tokens=config.MAX_TOKENS,
        temperature=config.TEMPERATURE,
    )

    # ‚úÖ –ß–∏—Å—Ç—ã–π –ª–æ–≥ –∑–∞–ø—Ä–æ—Å–∞ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ–º–ø—Ç–∞
    logging.debug(
        f"üì° –ó–∞–ø—Ä–æ—Å –∫ API: "
        f"model={config.MODEL}, "
        f"max_tokens={config.MAX_TOKENS}, "
        f"temperature={config.TEMPERATURE}, "
        f"prompt_type={prompt_type}"
    )

    # ‚úÖ –†–∞–∑–±–∏—Ä–∞–µ–º –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏
    if response.choices and response.choices[0].message and response.choices[0].message.content:
        response_text = response.choices[0].message.content.strip()
        lines = [line.strip() for line in response_text.split("\n") if line.strip()]

        if len(lines) < 2:  # –ï—Å–ª–∏ OpenAI –Ω–µ –≤–µ—Ä–Ω—É–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            logging.warning("‚ö†Ô∏è API –Ω–µ –≤–µ—Ä–Ω—É–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –±–µ—Ä–µ–º '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'")
            category = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            usernames_raw = lines[0] if lines else ""  # –ï—Å–ª–∏ OpenAI –≤–æ–æ–±—â–µ –Ω–∏—á–µ–≥–æ –Ω–µ –≤–µ—Ä–Ω—É–ª
        else:
            # ‚úÖ –£–±–∏—Ä–∞–µ–º "–ö–∞—Ç–µ–≥–æ—Ä–∏—è:" –∏–∑ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏
            category = lines[0].replace("–ö–∞—Ç–µ–≥–æ—Ä–∏—è:", "").strip()
            usernames_raw = lines[1]  # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî —Å–ø–∏—Å–æ–∫ username

        usernames = [u.strip() for u in usernames_raw.split(",")]

        logging.info(f"‚úÖ –ò—Ç–æ–≥–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category}")
        logging.info(f"‚úÖ –ò—Ç–æ–≥–æ–≤—ã–µ username: {usernames}")

        return usernames, category

    else:
        logging.warning("‚ö†Ô∏è API –Ω–µ –≤–µ—Ä–Ω—É–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
        return [], "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"


async def get_available_usernames(bot: Bot, context: str, style: str | None, n: int):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –º–æ–¥–µ–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é username —Å —É—á—ë—Ç–æ–º —Å—Ç–∏–ª—è –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏—Ö —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å."""

    try:
        n = int(n)
    except ValueError:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞: n –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º, –Ω–æ –ø—Ä–∏—à–ª–æ {type(n)} ({n})")
        n = config.AVAILABLE_USERNAME_COUNT

    start_time = time.time()
    attempts = 0
    available_usernames = set()
    checked_usernames = set()
    total_checked = 0
    total_free = 0
    empty_responses = 0

    while len(available_usernames) < n and attempts < config.GEN_ATTEMPTS:
        attempts += 1
        logging.info(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ {attempts}/{config.GEN_ATTEMPTS}")

        try:
            usernames, category = await generate_usernames(context, style or "", n)
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ username —á–µ—Ä–µ–∑ OpenAI: {e}")
            return []

        if not usernames:
            empty_responses += 1
            logging.warning(f"‚ö†Ô∏è AI –Ω–µ –¥–∞–ª username ({empty_responses}/{config.MAX_EMPTY_RESPONSES})")

            if empty_responses >= config.MAX_EMPTY_RESPONSES:
                logging.error("‚ùå AI –æ—Ç–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å username. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å.")
                break

            continue

        response_text = " ".join(usernames).lower()
        logging.info(f"üîç AI —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª: {usernames}")

        if any(phrase in response_text for phrase in ["–Ω–µ –º–æ–≥—É", "–ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—Ç", "–∏–∑–≤–∏–Ω–∏—Ç–µ", "—ç—Ç–æ –∑–∞–ø—Ä–µ—â–µ–Ω–æ", "–Ω–µ –¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è"]):
            logging.warning("‚ùå AI –æ—Ç–∫–∞–∑–∞–ª—Å—è –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å. –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é!")
            break

        valid_usernames = [u for u in usernames if u not in checked_usernames and is_valid_username(u)]
        checked_usernames.update(valid_usernames)

        if not valid_usernames:
            continue

        try:
            check_results = await check_multiple_usernames(valid_usernames)
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ username: {e}")
            continue

        tasks = []
        for username, result in check_results.items():
            total_checked += 1
            if result == "–°–≤–æ–±–æ–¥–Ω–æ" and len(available_usernames) < n:  # ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞!
                total_free += 1
                available_usernames.add(username)

            tasks.append(
                save_username_to_db(username=username, status=result, category=category, context=context, style=style, llm=config.MODEL)
            )

        if tasks:
            try:
                await asyncio.gather(*tasks)
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ –ë–î: {e}")

        if len(available_usernames) >= n:
            break

    duration = time.time() - start_time
    logging.info(f"üìä –ò—Ç–æ–≥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {attempts} –ø–æ–ø—ã—Ç–æ–∫, {total_checked} –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ, {total_free} —Å–≤–æ–±–æ–¥–Ω—ã—Ö, {len(available_usernames)} –≤—ã–¥–∞–Ω–æ. ‚è≥ {duration:.2f} —Å–µ–∫.")

    # ‚úÖ –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ n username
    return list(available_usernames)[:n]
