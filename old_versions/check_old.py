import asyncio
import re
import aiohttp
import os
import certifi
import ssl
from aiogram import Bot, Dispatcher, F
from aiogram.exceptions import TelegramBadRequest
from aiogram.types import Message
# from config import BOT_TOKEN




# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è SSL
os.environ["SSL_CERT_FILE"] = certifi.where()

print(f"[SETUP] SSL_CERT_FILE —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤: {os.environ['SSL_CERT_FILE']}")

# –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()


async def check_username_availability(username: str) -> str:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–≤–æ–±–æ–¥–µ–Ω –ª–∏ —é–∑–µ—Ä–Ω–µ–π–º –≤ Telegram —á–µ—Ä–µ–∑ API –∏ t.me."""
    print(f"\n[STEP 1] üîé –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É username: @{username}")

    try:
        print("[STEP 2] üîπ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ Telegram API...")
        await bot.get_chat(f"@{username}")  # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —á–∞—Ç
        print(f"[RESULT] ‚ùå –ò–º—è @{username} –∑–∞–Ω—è—Ç–æ (–Ω–∞–π–¥–µ–Ω–æ —á–µ—Ä–µ–∑ API).")
        return "–ó–∞–Ω—è—Ç–æ"

    except TelegramBadRequest as e:
        error_message = str(e).lower()
        print(f"[INFO] ‚ùó –û—à–∏–±–∫–∞ API: {error_message}")

        if "chat not found" in error_message:
            print(f"[STEP 3] üîπ –ò–º—è @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ API. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–æ–≤–µ—Ä–∫–µ —á–µ—Ä–µ–∑ t.me...")
            return await check_username_via_web(username)

        print(f"[ERROR] ‚ùó –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ API: {error_message}")
        return "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å"


async def check_username_via_web(username: str) -> str:
    """–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ t.me/{username} —Å –∞–Ω–∞–ª–∏–∑–æ–º HTML-–∫–æ–¥–∞."""
    url = f"https://t.me/{username}"
    print("[STEP 4] üîπ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ t.me...")

    ssl_context = ssl.create_default_context()
    ssl_context.check_hostname = False
    ssl_context.verify_mode = ssl.CERT_NONE

    async with aiohttp.ClientSession() as session:
        async with session.get(url, ssl=ssl_context) as response:
            text = await response.text()

            if response.status == 404:
                print(f"[RESULT] ‚úÖ –ò–º—è @{username} —Å–≤–æ–±–æ–¥–Ω–æ (–ø—Ä–æ–≤–µ—Ä–µ–Ω–æ —á–µ—Ä–µ–∑ t.me)")
                return "–°–≤–æ–±–æ–¥–Ω–æ"

            title_match = re.search(r"<title>(.*?)</title>", text, re.IGNORECASE)
            title_text = title_match.group(1) if title_match else ""

            if "tgme_page_title" in text or "If you have Telegram, you can contact" in text:
                print(f"[RESULT] ‚ùå –ò–º—è @{username} –∑–∞–Ω—è—Ç–æ (–ø—Ä–æ–≤–µ—Ä–µ–Ω–æ —á–µ—Ä–µ–∑ t.me)")
                return "–ó–∞–Ω—è—Ç–æ"

            if f"Telegram: Contact @{username}" in title_text and "tgme_page_title" not in text:
                print(f"[RESULT] ‚úÖ –ò–º—è @{username} —Å–≤–æ–±–æ–¥–Ω–æ (–ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É, –Ω–æ –±–µ–∑ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –ø—Ä–æ—Ñ–∏–ª—è)")
                return "–°–≤–æ–±–æ–¥–Ω–æ"

            print(f"[WARNING] ‚ö†Ô∏è –ù–µ–ø–æ–Ω—è—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç t.me –¥–ª—è @{username}: {response.status}, HTML: {text[:500]}")
            return "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å"


@dp.message(F.text.startswith("/check"))
async def check(message: Message):
    args = message.text.split()
    if len(args) < 2:
        await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /check [username]")
        return

    username = args[1].replace("@", "")

    # üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ username –∫—Ä–∏—Ç–µ—Ä–∏—è–º Telegram
    if not re.match(r"^[a-zA-Z0-9_]{5,32}$", username) or "__" in username or username.startswith(
            "_") or username.endswith("_"):
        await message.reply(
            "‚ùå –û—à–∏–±–∫–∞: username –¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º:\n"
            "1Ô∏è‚É£ **–°–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã (`A-Z, a-z`), —Ü–∏—Ñ—Ä—ã (`0-9`) –∏ `_`**\n"
            "2Ô∏è‚É£ **–ë—ã—Ç—å –¥–ª–∏–Ω–æ–π –æ—Ç 5 –¥–æ 32 —Å–∏–º–≤–æ–ª–æ–≤**\n"
            "3Ô∏è‚É£ **–ù–µ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è –∏ –Ω–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è `_`**\n"
            "4Ô∏è‚É£ **–ù–µ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¥–≤–∞ –ø–æ–¥—Ä—è–¥ –∏–¥—É—â–∏—Ö `_` (–Ω–∞–ø—Ä–∏–º–µ—Ä, `hello__world`)**"
        )
        return

    status = await check_username_availability(username)

    responses = {
        "–°–≤–æ–±–æ–¥–Ω–æ": f"‚úÖ –ò–º—è @{username} —Å–≤–æ–±–æ–¥–Ω–æ!",
        "–ó–∞–Ω—è—Ç–æ": f"‚ùå –ò–º—è @{username} —É–∂–µ –∑–∞–Ω—è—Ç–æ.",
        "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å": f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏ @{username}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    }

    print(f"[FINAL RESULT] üì¢ –ò—Ç–æ–≥ –¥–ª—è @{username}: {status}\n" + "-" * 50)
    await message.reply(responses[status])


async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())
